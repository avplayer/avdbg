typedef HANDLE  HFILE;

int __stdcall AcquireSRWLockExclusive(PSRWLOCK SRWLock);
int __stdcall AcquireSRWLockShared(PSRWLOCK SRWLock);
int __stdcall ActivateActCtx(HANDLE hActCtx,ULONG_PTR* lpCookie);
int __stdcall AddAtom(LPCTSTR lpString);
int __stdcall AddAtomA(LPCTSTR lpString);
int __stdcall AddAtomW(LPCTSTR lpString);
int __stdcall AddConsoleAlias(LPCTSTR Source,LPCTSTR Target,LPCTSTR ExeName);
int __stdcall AddRefActCtx(HANDLE hActCtx);
int __stdcall AddSIDToBoundaryDescriptor(HANDLE* BoundaryDescriptor,PSID RequiredSid);
int __stdcall AddSecureMemoryCacheCallback(PSECURE_MEMORY_CACHE_CALLBACK pfnCallBack);
int __stdcall AddVectoredContinueHandler(ULONG FirstHandler,PVECTORED_EXCEPTION_HANDLER VectoredHandler);
int __stdcall AddVectoredExceptionHandler(ULONG FirstHandler,PVECTORED_EXCEPTION_HANDLER VectoredHandler);
int __stdcall AdjustCalendarDate(LPCALDATETIME lpCalDateTime,CALDATETIME_DATEUNIT calUnit,INT amount);
int __stdcall AllocConsole();
int __stdcall AllocateUserPhysicalPages(HANDLE hProcess,PULONG_PTR NumberOfPages,PULONG_PTR UserPfnArray);
int __stdcall AllocateUserPhysicalPagesNuma(HANDLE hProcess,PULONG_PTR NumberOfPages,PULONG_PTR PageArray,DWORD nndPreferred);
int __stdcall ApplicationRecoveryFinished(BOOL bSuccess);
int __stdcall ApplicationRecoveryInProgress(PBOOL pbCanceled);
int __stdcall AreFileApisANSI();
int __stdcall AssignProcessToJobObject(HANDLE hJob,HANDLE hProcess);
int __stdcall AttachConsole(DWORD dwProcessId);
int __stdcall BackupRead(HANDLE hFile,LPBYTE lpBuffer,DWORD nNumberOfBytesToRead,LPDWORD lpNumberOfBytesRead,BOOL bAbort,BOOL bProcessSecurity,LPVOID* lpContext);
int __stdcall BackupSeek(HANDLE hFile,DWORD dwLowBytesToSeek,DWORD dwHighBytesToSeek,LPDWORD lpdwLowByteSeeked,LPDWORD lpdwHighByteSeeked,LPVOID* lpContext);
int __stdcall BackupWrite(HANDLE hFile,LPBYTE lpBuffer,DWORD nNumberOfBytesToWrite,LPDWORD lpNumberOfBytesWritten,BOOL bAbort,BOOL bProcessSecurity,LPVOID* lpContext);
int __stdcall Beep(DWORD dwFreq,DWORD dwDuration);
int __stdcall BeginUpdateResource(LPCTSTR pFileName,BOOL bDeleteExistingResources);
int __stdcall BindIoCompletionCallback(HANDLE FileHandle,LPOVERLAPPED_COMPLETION_ROUTINE Function,ULONG Flags);
int __stdcall BuildCommDCB(LPCTSTR lpDef,LPDCB lpDCB);
int __stdcall BuildCommDCBAndTimeouts(LPCTSTR lpDef,LPDCB lpDCB,LPCOMMTIMEOUTS lpCommTimeouts);
int __stdcall CallbackMayRunLong(PTP_CALLBACK_INSTANCE pci);
int __stdcall CancelIo(HANDLE hFile);
int __stdcall CancelIoEx(HANDLE hFile,LPOVERLAPPED lpOverlapped);
int __stdcall CancelSynchronousIo(HANDLE hThread);
int __stdcall CancelThreadpoolIo(PTP_IO pio);
int __stdcall CancelWaitableTimer(HANDLE hTimer);
int __stdcall ChangeTimerQueueTimer(HANDLE TimerQueue,HANDLE Timer,ULONG DueTime,ULONG Period);
int __stdcall CheckNameLegalDOS8Dot3(LPCTSTR lpName,LPSTR lpOemName,DWORD OemNameSize,PBOOL pbNameContainsSpaces,PBOOL pbNameLegal);
int __stdcall CheckRemoteDebuggerPresent(HANDLE hProcess,PBOOL pbDebuggerPresent);
int __stdcall ClearCommBreak(HANDLE hFile);
int __stdcall ClearCommError(HANDLE hFile,LPDWORD lpErrors,LPCOMSTAT lpStat);
int __stdcall CloseHandle(HANDLE hObject);
int __stdcall ClosePrivateNamespace(HANDLE Handle,DWORD Flags);
int __stdcall CloseThreadpool(PTP_POOL ptpp);
int __stdcall CloseThreadpoolCleanupGroup(PTP_CLEANUP_GROUP ptpcg);
int __stdcall CloseThreadpoolCleanupGroupMembers(PTP_CLEANUP_GROUP ptpcg,BOOL fCancelPendingCallbacks,PVOID pvCleanupContext);
int __stdcall CloseThreadpoolIo(PTP_IO pio);
int __stdcall CloseThreadpoolTimer(PTP_TIMER pti);
int __stdcall CloseThreadpoolWait(PTP_WAIT pwa);
int __stdcall CloseThreadpoolWork(PTP_WORK pwk);
int __stdcall CommConfigDialog(LPCTSTR lpszName,HWND hWnd,LPCOMMCONFIG lpCC);
int __stdcall CompareFileTime(const FILETIME* lpFileTime1,const FILETIME* lpFileTime2);
int __stdcall CompareString(LCID Locale,DWORD dwCmpFlags,LPCTSTR lpString1,int cchCount1,LPCTSTR lpString2,int cchCount2);
int __stdcall CompareStringA(LCID Locale,DWORD dwCmpFlags,LPCTSTR lpString1,int cchCount1,LPCTSTR lpString2,int cchCount2);
int __stdcall CompareStringEx(LPCWSTR lpLocaleName,DWORD dwCmpFlags,LPCWSTR lpString1,int cchCount1,LPCWSTR lpString2,int cchCount2,LPNLSVERSIONINFO lpVersionInformation,LPVOID lpReserved,LPARAM lParam);
int __stdcall CompareStringOrdinal(LPCWSTR lpString1,int cchCount1,LPCWSTR lpString2,int cchCount2,BOOL bIgnoreCase);
int __stdcall CompareStringW(LCID Locale,DWORD dwCmpFlags,LPCTSTR lpString1,int cchCount1,LPCTSTR lpString2,int cchCount2);
int __stdcall ContinueDebugEvent(DWORD dwProcessId,DWORD dwThreadId,DWORD dwContinueStatus);
int __stdcall ConvertCalDateTimeToSystemTime(const LPCALDATETIME lpCalDateTime,SYSTEMTIME* lpSysTime);
int __stdcall ConvertDefaultLocale(LCID Locale);
int __stdcall ConvertFiberToThread();
int __stdcall ConvertSystemTimeToCalDateTime(const SYSTEMTIME lpSysTime,CALID calId,LPCALDATETIME lpCalDateTime);
int __stdcall ConvertThreadToFiber(LPVOID lpParameter);
int __stdcall ConvertThreadToFiberEx(LPVOID lpParameter,DWORD dwFlags);
int __stdcall CopyExtendedContext(PCONTEXT_EX Destination,DWORD ContextFlags,PCONTEXT_EX Source);
int __stdcall CopyFile(LPCTSTR lpExistingFileName,LPCTSTR lpNewFileName,BOOL bFailIfExists);
int __stdcall CopyFileA(LPCTSTR lpExistingFileName,LPCTSTR lpNewFileName,BOOL bFailIfExists);
int __stdcall CopyFileEx(LPCTSTR lpExistingFileName,LPCTSTR lpNewFileName,LPPROGRESS_ROUTINE lpProgressRoutine,LPVOID lpData,LPBOOL pbCancel,DWORD dwCopyFlags);
int __stdcall CopyFileTransacted(LPCTSTR lpExistingFileName,LPCTSTR lpNewFileName,LPPROGRESS_ROUTINE lpProgressRoutine,LPVOID lpData,LPBOOL pbCancel,DWORD dwCopyFlags,HANDLE hTransaction);
int __stdcall CopyFileW(LPCTSTR lpExistingFileName,LPCTSTR lpNewFileName,BOOL bFailIfExists);
int __stdcall CreateActCtx(PACTCTX pActCtx);
int __stdcall CreateActCtxA(PACTCTX actctx);
int __stdcall CreateActCtxW(PACTCTX actctx);
int __stdcall CreateBoundaryDescriptor(LPCTSTR Name,ULONG Flags);
int __stdcall CreateConsoleScreenBuffer(DWORD dwDesiredAccess,DWORD dwShareMode,const SECURITY_ATTRIBUTES* lpSecurityAttributes,DWORD dwFlags,LPVOID lpScreenBufferData);
int __stdcall CreateDirectory(LPCTSTR lpPathName,LPSECURITY_ATTRIBUTES lpSecurityAttributes);
int __stdcall CreateDirectoryA(LPCTSTR lpPathName,LPSECURITY_ATTRIBUTES pSecurityAttributes);
int __stdcall CreateDirectoryEx(LPCTSTR lpTemplateDirectory,LPCTSTR lpNewDirectory,LPSECURITY_ATTRIBUTES lpSecurityAttributes);
int __stdcall CreateDirectoryTransacted(LPCTSTR lpTemplateDirectory,LPCTSTR lpNewDirectory,LPSECURITY_ATTRIBUTES lpSecurityAttributes,HANDLE hTransaction);
int __stdcall CreateDirectoryW(LPCTSTR lpPathName,LPSECURITY_ATTRIBUTES pSecurityAttributes);
int __stdcall CreateEvent(LPSECURITY_ATTRIBUTES lpEventAttributes,BOOL bManualReset,BOOL bInitialState,LPCTSTR lpName);
int __stdcall CreateEventA(LPSECURITY_ATTRIBUTES lpEventAttributes,BOOL bManualReset,BOOL bInitialState,LPCTSTR lpName);
int __stdcall CreateEventEx(LPSECURITY_ATTRIBUTES lpEventAttributes,LPCTSTR lpName,DWORD dwFlags,DWORD dwDesiredAccess);
int __stdcall CreateEventW(LPSECURITY_ATTRIBUTES lpEventAttributes,BOOL bManualReset,BOOL bInitialState,LPCTSTR lpName);
int __stdcall CreateFiber(SIZE_T dwStackSize,LPFIBER_START_ROUTINE lpStartAddress,LPVOID lpParameter);
int __stdcall CreateFiberEx(SIZE_T dwStackCommitSize,SIZE_T dwStackReserveSize,DWORD dwFlags,LPFIBER_START_ROUTINE lpStartAddress,LPVOID lpParameter);
int __stdcall CreateFile(LPCTSTR lpFileName,DWORD dwDesiredAccess,DWORD dwShareMode,LPSECURITY_ATTRIBUTES lpSecurityAttributes,DWORD dwCreationDisposition,DWORD dwFlagsAndAttributes,HANDLE hTemplateFile);
int __stdcall CreateFileA(LPCTSTR lpFileName,DWORD dwDesiredAccess,DWORD dwShareMode,LPSECURITY_ATTRIBUTES lpSecurityAttributes,DWORD dwCreationDistribution,DWORD dwFlagsAndAttributes,HANDLE hTemplateFile);
int __stdcall CreateFileMapping(HANDLE hFile,LPSECURITY_ATTRIBUTES lpAttributes,DWORD flProtect,DWORD dwMaximumSizeHigh,DWORD dwMaximumSizeLow,LPCTSTR lpName);
int __stdcall CreateFileMappingA(HANDLE hFile,LPSECURITY_ATTRIBUTES lpFileMappingAttributes,DWORD flProtect,DWORD dwMaximumSizeHigh,DWORD dwMaximumSizeLow,LPCTSTR lpName);
int __stdcall CreateFileMappingNuma(HANDLE hFile,LPSECURITY_ATTRIBUTES lpFileMappingAttributes,DWORD flProtect,DWORD dwMaximumSizeHigh,DWORD dwMaximumSizeLow,LPCTSTR lpName,DWORD nndPreferred);
int __stdcall CreateFileMappingW(HANDLE hFile,LPSECURITY_ATTRIBUTES lpFileMappingAttributes,DWORD flProtect,DWORD dwMaximumSizeHigh,DWORD dwMaximumSizeLow,LPCTSTR lpName);
int __stdcall CreateFileTransacted(LPCTSTR lpFileName,DWORD dwDesiredAccess,DWORD dwShareMode,LPSECURITY_ATTRIBUTES lpSecurityAttributes,DWORD dwCreationDisposition,DWORD dwFlagsAndAttributes,HANDLE hTemplateFile,HANDLE hTransaction,PUSHORT pusMiniVersion,PVOID pExtendedParameter);
int __stdcall CreateFileW(LPCTSTR lpFileName,DWORD dwDesiredAccess,DWORD dwShareMode,LPSECURITY_ATTRIBUTES lpSecurityAttributes,DWORD dwCreationDistribution,DWORD dwFlagsAndAttributes,HANDLE hTemplateFile);
int __stdcall CreateHardLink(LPCTSTR lpFileName,LPCTSTR lpExistingFileName,LPSECURITY_ATTRIBUTES lpSecurityAttributes);
int __stdcall CreateHardLinkTransacted(LPCTSTR lpFileName,LPCTSTR lpExistingFileName,LPSECURITY_ATTRIBUTES lpSecurityAttributes,HANDLE hTransaction);
int __stdcall CreateIoCompletionPort(HANDLE FileHandle,HANDLE ExistingCompletionPort,ULONG_PTR CompletionKey,DWORD NumberOfConcurrentThreads);
int __stdcall CreateJobObject(LPSECURITY_ATTRIBUTES lpJobAttributes,LPCTSTR lpName);
int __stdcall CreateMailslot(LPCTSTR lpName,DWORD nMaxMessageSize,DWORD lReadTimeout,LPSECURITY_ATTRIBUTES lpSecurityAttributes);
int __stdcall CreateMailslotA(LPCTSTR lpName,DWORD nMaxMessageSize,DWORD lReadTimeout,LPSECURITY_ATTRIBUTES lpSecurityAttributes);
int __stdcall CreateMailslotW(LPCTSTR lpName,DWORD nMaxMessageSize,DWORD lReadTimeout,LPSECURITY_ATTRIBUTES lpSecurityAttributes);
int __stdcall CreateMemoryResourceNotification(MEMORY_RESOURCE_NOTIFICATION_TYPE NotificationType);
int __stdcall CreateMutex(LPSECURITY_ATTRIBUTES lpMutexAttributes,BOOL bInitialOwner,LPCTSTR lpName);
int __stdcall CreateMutexA(LPSECURITY_ATTRIBUTES lpMutexAttributes,BOOL bInitialOwner,LPCTSTR lpName);
int __stdcall CreateMutexEx(LPSECURITY_ATTRIBUTES lpMutexAttributes,LPCTSTR lpName,DWORD dwFlags,DWORD dwDesiredAccess);
int __stdcall CreateMutexW(LPSECURITY_ATTRIBUTES lpMutexAttributes,BOOL bInitialOwner,LPCTSTR lpName);
int __stdcall CreatePrivateNamespace(LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes,LPVOID lpBoundaryDescriptor,LPCTSTR lpAliasPrefix);
bool __stdcall CreateProcess(LPCTSTR lpApplicationName,LPTSTR lpCommandLine,LPSECURITY_ATTRIBUTES lpProcessAttributes,LPSECURITY_ATTRIBUTES lpThreadAttributes,BOOL bInheritHandles,DWORD dwCreationFlags,LPVOID lpEnvironment,LPCTSTR lpCurrentDirectory,LPSTARTUPINFO lpStartupInfo,LPPROCESS_INFORMATION lpProcessInformation);
bool __stdcall CreateProcessA(LPCTSTR lpApplicationName,LPTSTR lpCommandLine,LPSECURITY_ATTRIBUTES lpProcessAttributes,LPSECURITY_ATTRIBUTES lpThreadAttributes,BOOL bInheritHandles,DWORD dwCreationFlags,LPVOID lpEnvironment,LPCTSTR lpCurrentDirectory,LPSTARTUPINFO lpStartupInfo,LPPROCESS_INFORMATION lpProcessInformation);
bool __stdcall CreateProcessW(LPCTSTR lpApplicationName,LPTSTR lpCommandLine,LPSECURITY_ATTRIBUTES lpProcessAttributes,LPSECURITY_ATTRIBUTES lpThreadAttributes,BOOL bInheritHandles,DWORD dwCreationFlags,LPVOID lpEnvironment,LPCTSTR lpCurrentDirectory,LPSTARTUPINFO lpStartupInfo,LPPROCESS_INFORMATION lpProcessInformation);
int __stdcall CreateRemoteThread(HANDLE hProcess,LPSECURITY_ATTRIBUTES lpThreadAttributes,SIZE_T dwStackSize,LPTHREAD_START_ROUTINE lpStartAddress,LPVOID lpParameter,DWORD dwCreationFlags,LPDWORD lpThreadId);
int __stdcall CreateRemoteThreadEx(HANDLE hProcess,LPSECURITY_ATTRIBUTES lpThreadAttributes,SIZE_T dwStackSize,LPTHREAD_START_ROUTINE lpStartAddress,LPVOID lpParameter,DWORD dwCreationFlags,LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,LPDWORD lpThreadId);
int __stdcall CreateSemaphore(LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,LONG lInitialCount,LONG lMaximumCount,LPCTSTR lpName);
int __stdcall CreateSemaphoreA(LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,LONG lInitialCount,LONG lMaximumCount,LPCTSTR lpName);
int __stdcall CreateSemaphoreEx(LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,LONG lInitialCount,LONG lMaximumCount,LPCTSTR lpName,DWORD dwFlags,DWORD dwDesiredAccess);
int __stdcall CreateSemaphoreW(LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,LONG lInitialCount,LONG lMaximumCount,LPCTSTR lpName);
int __stdcall CreateSymbolicLink(LPTSTR lpSymlinkFileName,LPTSTR lpTargetFileName,DWORD dwFlags);
int __stdcall CreateSymbolicLinkTransacted(LPTSTR lpSymlinkFileName,LPTSTR lpTargetFileName,DWORD dwFlags,HANDLE hTransaction);
int __stdcall CreateTapePartition(HANDLE hDevice,DWORD dwPartitionMethod,DWORD dwCount,DWORD dwSize);
HANDLE __stdcall CreateThread(LPSECURITY_ATTRIBUTES lpThreadAttributes,SIZE_T dwStackSize,LPTHREAD_START_ROUTINE dwThreadFunction,LPVOID pThreadParm,DWORD dwCreationFlags,LPDWORD lpThreadId);
int __stdcall CreateThreadpool(PVOID reserved);
int __stdcall CreateThreadpoolCleanupGroup();
int __stdcall CreateThreadpoolIo(HANDLE fl,PTP_WIN32_IO_CALLBACK pfnio,PVOID pv,PTP_CALLBACK_ENVIRON pcbe);
int __stdcall CreateThreadpoolTimer(PTP_TIMER_CALLBACK pfnti,PVOID pv,PTP_CALLBACK_ENVIRON pcbe);
int __stdcall CreateThreadpoolWait(PTP_WAIT_CALLBACK pfnwa,PVOID pv,PTP_CALLBACK_ENVIRON pcbe);
int __stdcall CreateThreadpoolWork(PTP_WORK_CALLBACK pfnwk,PVOID pv,PTP_CALLBACK_ENVIRON pcbe);
int __stdcall CreateTimerQueue();
int __stdcall CreateTimerQueueTimer(PHANDLE phNewTimer,HANDLE TimerQueue,WAITORTIMERCALLBACK Callback,PVOID Parameter,DWORD DueTime,DWORD Period,DWORD Flags);
int __stdcall CreateToolhelp32Snapshot(DWORD dwFlags,DWORD th32ProcessID);
int __stdcall CreateUmsCompletionList(PUMS_COMPLETION_LIST* UmsCompletionList);
int __stdcall CreateUmsThreadContext(PUMS_CONTEXT* lpUmsThread);
int __stdcall CreateWaitableTimer(LPSECURITY_ATTRIBUTES lpTimerAttributes,BOOL bManualReset,LPCTSTR lpTimerName);
int __stdcall CreateWaitableTimerA(LPSECURITY_ATTRIBUTES lpTimerAttributes,BOOL bManualReset,LPCTSTR lpTimerName);
int __stdcall CreateWaitableTimerEx(LPSECURITY_ATTRIBUTES lpTimerAttributes,LPCTSTR lpTimerName,DWORD dwFlags,DWORD dwDesiredAccess);
int __stdcall CreateWaitableTimerW(LPSECURITY_ATTRIBUTES lpTimerAttributes,BOOL bManualReset,LPCTSTR lpTimerName);
int __stdcall DeactivateActCtx(DWORD dwFlags,ULONG_PTR ulCookie);
int __stdcall DebugActiveProcess(DWORD dwProcessId);
int __stdcall DebugActiveProcessStop(DWORD dwProcessId);
int __stdcall DebugBreak();
int __stdcall DebugBreakProcess(HANDLE Process);
int __stdcall DebugSetProcessKillOnExit(BOOL KillOnExit);
int __stdcall DeleteAtom(ATOM nAtom);
int __stdcall DeleteBoundaryDescriptor(HANDLE BoundaryDescriptor);
int __stdcall DeleteCriticalSection(LPCRITICAL_SECTION lpCriticalSection);
int __stdcall DeleteFiber(LPVOID lpFiber);
int __stdcall DeleteFile(LPCTSTR lpFileName);
int __stdcall DeleteFileA(LPCTSTR lpFileName);
int __stdcall DeleteFileTransacted(LPCTSTR lpFileName,HANDLE hTransaction);
int __stdcall DeleteFileW(LPCTSTR lpFileName);
int __stdcall DeleteProcThreadAttributeList(LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList);
int __stdcall DeleteTimerQueue(HANDLE TimerQueue);
int __stdcall DeleteTimerQueueEx(HANDLE TimerQueue,HANDLE CompletionEvent);
int __stdcall DeleteTimerQueueTimer(HANDLE TimerQueue,HANDLE Timer,HANDLE CompletionEvent);
int __stdcall DeleteUmsCompletionList(PUMS_COMPLETION_LIST UmsCompletionList);
int __stdcall DeleteUmsThreadContext(PUMS_CONTEXT UmsThread);
int __stdcall DequeueUmsCompletionListItems(PUMS_COMPLETION_LIST UmsCompletionList,DWORD WaitTimeOut,PUMS_CONTEXT* UmsThreadList);
int __stdcall DeviceIoControl(HANDLE hDevice,DWORD dwIoControlCode,LPVOID lpInBuffer,DWORD nInBufferSize,LPVOID pOutBuffer,DWORD nOutBufferSize,LPDWORD lpBytesReturned,LPOVERLAPPED lpOverlapped);
int __stdcall DisableThreadLibraryCalls(HMODULE hModule);
int __stdcall DisassociateCurrentThreadFromCallback(PTP_CALLBACK_INSTANCE pci);
int __stdcall DnsHostnameToComputerName(LPCTSTR Hostname,LPTSTR ComputerName,LPDWORD nSize);
int __stdcall DosDateTimeToFileTime(WORD wFatDate,WORD wFatTime,LPFILETIME lpFileTime);
int __stdcall DuplicateHandle(HANDLE hSourceProcessHandle,HANDLE hSourceHandle,HANDLE hTargetProcessHandle,LPHANDLE pTargetHandle,DWORD dwDesiredAccess,BOOL bInheritHandle,DWORD dwOptions);
int __stdcall EmptyWorkingSet(HANDLE hProcess);
int __stdcall EndUpdateResource(HANDLE hUpdate,BOOL fDiscard);
int __stdcall EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection);
int __stdcall EnterUmsSchedulingMode(PUMS_SCHEDULER_STARTUP_INFO SchedulerStartupInfo);
int __stdcall EnumCalendarInfo(CALINFO_ENUMPROC pCalInfoEnumProc,LCID Locale,CALID Calendar,CALTYPE CalType);
int __stdcall EnumCalendarInfoA(CALINFO_ENUMPROC lpCalInfoEnumProc,LCID Locale,CALID Calendar,CALTYPE CalType);
int __stdcall EnumCalendarInfoEx(CALINFO_ENUMPROCEX pCalInfoEnumProcEx,LCID Locale,CALID Calendar,CALTYPE CalType);
int __stdcall EnumCalendarInfoExEx(CALINFO_ENUMPROCEXEX pCalInfoEnumProcExEx,LPCWSTR lpLocaleName,CALID Calendar,LPCWSTR lpReserved,CALTYPE CalType,LPARAM lParam);
int __stdcall EnumCalendarInfoW(CALINFO_ENUMPROC lpCalInfoEnumProc,LCID Locale,CALID Calendar,CALTYPE CalType);
int __stdcall EnumDateFormats(DATEFMT_ENUMPROC lpDateFmtEnumProc,LCID Locale,DWORD dwFlags);
int __stdcall EnumDateFormatsA(DATEFMT_ENUMPROC lpDateFmtEnumProc,LCID Locale,DWORD dwFlags);
int __stdcall EnumDateFormatsEx(DATEFMT_ENUMPROCEX lpDateFmtEnumProcEx,LCID Locale,DWORD dwFlags);
int __stdcall EnumDateFormatsExEx(DATEFMT_ENUMPROCEXEX lpDateFmtEnumProcExEx,LPCWSTR lpLocaleName,DWORD dwFlags,LPARAM lParam);
int __stdcall EnumDateFormatsW(DATEFMT_ENUMPROC lpDateFmtEnumProc,LCID Locale,DWORD dwFlags);
int __stdcall EnumDeviceDrivers(LPVOID* lpImageBase,DWORD cb,LPDWORD lpcbNeeded);
int __stdcall EnumLanguageGroupLocales(LANGGROUPLOCALE_ENUMPROC lpLangGroupLocaleEnumProc,LGRPID LanguageGroup,DWORD dwFlags,LONG_PTR lParam);
int __stdcall EnumPageFiles(PENUM_PAGE_CALLBACK pCallbackRoutine,LPVOID lpContext);
int __stdcall EnumProcessModules(HANDLE hProcess,HMODULE* lphModule,DWORD cb,LPDWORD lpcbNeeded);
int __stdcall EnumProcessModulesEx(HANDLE hProcess,HMODULE* lphModule,DWORD cb,LPDWORD lpcbNeeded,DWORD dwFilterFlag);
int __stdcall EnumProcesses(LPVOID pProcessIds,DWORD cb,DWORD* pBytesReturned);
int __stdcall EnumResourceLanguages(HMODULE hModule,LPCTSTR lpType,LPCTSTR lpName,ENUMRESLANGPROC lpEnumFunc,LONG_PTR lParam);
int __stdcall EnumResourceLanguagesEx(HMODULE hModule,LPCTSTR lpType,LPCTSTR lpName,ENUMRESLANGPROC lpEnumFunc,LONG_PTR lParam,DWORD dwFlags,LANGID LangId);
int __stdcall EnumResourceNames(HMODULE hModule,LPCTSTR lpszType,ENUMRESNAMEPROC lpEnumFunc,LONG_PTR lParam);
int __stdcall EnumResourceNamesA(HMODULE hModule,LPCTSTR lpszType,ENUMRESNAMEPROC lpEnumFunc,LONG_PTR IParam);
int __stdcall EnumResourceNamesEx(HMODULE hModule,LPCTSTR lpszType,ENUMRESNAMEPROC lpEnumFunc,LONG_PTR lParam,DWORD dwFlags,LANGID LangId);
int __stdcall EnumResourceNamesW(HMODULE hModule,LPCTSTR lpszType,ENUMRESNAMEPROC lpEnumFunc,LONG_PTR IParam);
int __stdcall EnumResourceTypes(HMODULE hModule,ENUMRESTYPEPROC lpEnumFunc,LONG_PTR lParam);
int __stdcall EnumResourceTypesA(HMODULE hModule,ENUMRESTYPEPROC lpEnumFunc,LONG_PTR IParam);
int __stdcall EnumResourceTypesEx(HMODULE hModule,ENUMRESTYPEPROC lpEnumFunc,LONG_PTR lParam,DWORD dwFlags,LANGID LangId);
int __stdcall EnumSystemCodePages(CODEPAGE_ENUMPROC lpCodePageEnumProc,DWORD dwFlags);
int __stdcall EnumSystemCodePagesA(CODEPAGE_ENUMPROC lpCodePageEnumProc,DWORD dwFlags);
int __stdcall EnumSystemCodePagesW(CODEPAGE_ENUMPROC lpCodePageEnumProc,DWORD dwFlags);
int __stdcall EnumSystemFirmwareTables(DWORD FirmwareTableProviderSignature,PVOID pFirmwareTableBuffer,DWORD BufferSize);
int __stdcall EnumSystemGeoID(GEOCLASS GeoClass,GEOID ParentGeoId,GEO_ENUMPROC lpGeoEnumProc);
int __stdcall EnumSystemLanguageGroups(LANGUAGEGROUP_ENUMPROC lpLanguageGroupEnumProc,DWORD dwFlags,LONG_PTR lParam);
int __stdcall EnumSystemLocales(LOCALE_ENUMPROC lpLocaleEnumProc,DWORD dwFlags);
int __stdcall EnumSystemLocalesA(LOCALE_ENUMPROC pLocaleEnumProc,DWORD dwFlags);
int __stdcall EnumSystemLocalesEx(LOCALE_ENUMPROCEX lpLocaleEnumProcEx,DWORD dwFlags,LPARAM lParam,LPVOID lpReserved);
int __stdcall EnumSystemLocalesW(LOCALE_ENUMPROC pLocaleEnumProc,DWORD dwFlags);
int __stdcall EnumTimeFormats(TIMEFMT_ENUMPROC lpTimeFmtEnumProc,LCID Locale,DWORD dwFlags);
int __stdcall EnumTimeFormatsA(TIMEFMT_ENUMPROC lpTimeFmtEnumProc,LCID Locale,DWORD dwFlags);
int __stdcall EnumTimeFormatsEx(TIMEFMT_ENUMPROCEX lpTimeFmtEnumProcEx,LPCWSTR lpLocaleName,DWORD dwFlags,LPARAM lParam);
int __stdcall EnumTimeFormatsW(TIMEFMT_ENUMPROC lpTimeFmtEnumProc,LCID Locale,DWORD dwFlags);
int __stdcall EraseTape(HANDLE hDevice,DWORD dwEraseType,BOOL bImmediate);
int __stdcall EscapeCommFunction(HANDLE hFile,DWORD dwFunc);
int __stdcall ExecuteUmsThread(PUMS_CONTEXT UmsThread);
VOID __stdcall ExitProcess(UINT uExitCode);
int __stdcall ExitThread(DWORD uExitCode);
int __stdcall ExpandEnvironmentStrings(LPCTSTR lpSrc,LPTSTR lpDst,DWORD nSize);
int __stdcall ExpandEnvironmentStringsA(LPCTSTR lpSrc,LPTSTR lpDst,DWORD nSize);
int __stdcall ExpandEnvironmentStringsW(LPCTSTR lpSrc,LPTSTR lpDst,DWORD nSize);
int __stdcall FatalAppExit(UINT uAction,LPCTSTR lpMessageText);
int __stdcall FatalExit(int ExitCode);
int __stdcall FileTimeToDosDateTime(const FILETIME* lpFileTime,LPWORD lpFatDate,LPWORD lpFatTime);
int __stdcall FileTimeToLocalFileTime(const FILETIME* lpFileTime,LPFILETIME lpLocalFileTime);
int __stdcall FileTimeToSystemTime(const FILETIME* lpFileTime,LPSYSTEMTIME lpSystemTime);
int __stdcall FillConsoleOutputAttribute(HANDLE hConsoleOutput,WORD wAttribute,DWORD nLength,COORD dwWriteCoord,LPDWORD lpNumberOfAttrsWritten);
int __stdcall FillConsoleOutputCharacter(HANDLE hConsoleOutput,TCHAR cCharacter,DWORD nLength,COORD dwWriteCoord,LPDWORD lpNumberOfCharsWritten);
int __stdcall FillConsoleOutputCharacterA(HANDLE hConsoleOutput,TCHAR cCharacter,DWORD nLength,COORD dwWriteCoord,LPDWORD lpNumberOfCharsWritten);
int __stdcall FindActCtxSectionGuid(DWORD dwFlags,const GUID* lpExtensionGuid,DWORD ulSectionId,const GUID* lpGuidToFind,PACTCTX_SECTION_KEYED_DATA ReturnedData);
int __stdcall FindActCtxSectionString(DWORD dwFlags,const GUID* lpExtensionGuid,DWORD ulSectionId,LPCTSTR lpStringToFind,PACTCTX_SECTION_KEYED_DATA ReturnedData);
int __stdcall FindAtom(LPCTSTR lpString);
int __stdcall FindAtomA(LPCTSTR lpString);
int __stdcall FindAtomW(LPCTSTR lpString);
int __stdcall FindClose(HANDLE hFindFile);
int __stdcall FindCloseChangeNotification(HANDLE hChangeHandle);
int __stdcall FindCloseChangeNotificationA(HANDLE hChangeHandle);
int __stdcall FindCloseChangeNotificationW(HANDLE hChangeHandle);
int __stdcall FindFirstChangeNotification(LPCTSTR lpPathName,BOOL bWatchSubtree,DWORD dwNotifyFilter);
int __stdcall FindFirstChangeNotificationA(LPCTSTR lpPathName,BOOL bWatchSubtree,DWORD dwNotifyFilter);
int __stdcall FindFirstChangeNotificationW(LPCTSTR lpPathName,BOOL bWatchSubtree,DWORD dwNotifyFilter);
int __stdcall FindFirstFile(LPCTSTR lpFileName,LPWIN32_FIND_DATA lpFindFileData);
int __stdcall FindFirstFileA(LPCTSTR lpFileName,LPWIN32_FIND_DATA lpFindFileData);
int __stdcall FindFirstFileEx(LPCTSTR lpFileName,FINDEX_INFO_LEVELS fInfoLevelId,LPVOID lpFindFileData,FINDEX_SEARCH_OPS fSearchOp,LPVOID lpSearchFilter,DWORD dwAdditionalFlags);
int __stdcall FindFirstFileNameTransactedW(LPCWSTR lpFileName,DWORD dwFlags,LPDWORD StringLength,PWCHAR LinkName,HANDLE hTransaction);
int __stdcall FindFirstFileNameW(LPCWSTR lpFileName,DWORD dwFlags,LPDWORD StringLength,PWCHAR LinkName);
int __stdcall FindFirstFileTransacted(LPCTSTR lpFileName,FINDEX_INFO_LEVELS fInfoLevelId,LPVOID lpFindFileData,FINDEX_SEARCH_OPS fSearchOp,LPVOID lpSearchFilter,DWORD dwAdditionalFlags,HANDLE hTransaction);
int __stdcall FindFirstFileW(LPCTSTR lpFileName,LPWIN32_FIND_DATA lpFindFileData);
int __stdcall FindFirstStreamTransactedW(LPCWSTR lpFileName,STREAM_INFO_LEVELS InfoLevel,LPVOID lpFindStreamData,DWORD dwFlags,HANDLE hTransaction);
int __stdcall FindFirstStreamW(LPCWSTR lpFileName,STREAM_INFO_LEVELS InfoLevel,LPVOID lpFindStreamData,DWORD dwFlags);
int __stdcall FindNLSString(LCID Locale,DWORD dwFindNLSStringFlags,LPCWSTR lpStringSource,int cchSource,LPCWSTR lpStringValue,int cchValue,LPINT pcchFound);
int __stdcall FindNLSStringEx(LPCWSTR lpLocaleName,DWORD dwFindNLSStringFlags,LPCWSTR lpStringSource,int cchSource,LPCWSTR lpStringValue,int cchValue,LPINT pcchFound,LPNLSVERSIONINFO lpVersionInformation,LPVOID lpReserved,LPARAM lParam);
int __stdcall FindNextChangeNotification(HANDLE hChangeHandle );
int __stdcall FindNextFile(HANDLE hFindFile,LPWIN32_FIND_DATA lpFindFileData);
int __stdcall FindNextFileA(HANDLE hFindFile,LPWIN32_FIND_DATA lpFindFileData);
int __stdcall FindNextFileNameW(HANDLE hFindStream,LPDWORD StringLength,PWCHAR LinkName);
int __stdcall FindNextFileW(HANDLE hFindFile,LPWIN32_FIND_DATA lpFindFileData);
int __stdcall FindNextStreamW(HANDLE hFindStream,LPVOID lpFindStreamData);
int __stdcall FindResource(HMODULE hModule,LPCTSTR lpName,LPCTSTR lpType);
int __stdcall FindResourceA(HMODULE hModule,LPCTSTR lpName,LPCTSTR lpType);
int __stdcall FindResourceEx(HMODULE hModule,LPCTSTR lpType,LPCTSTR lpName,WORD wLanguage);
int __stdcall FindResourceExA(HMODULE hModule,LPCTSTR lpType,LPCTSTR lpName,WORD wLanguage);
int __stdcall FindResourceExW(HMODULE hModule,LPCTSTR lpType,LPCTSTR lpName,WORD wLanguage);
int __stdcall FindResourceW(HMODULE hModule,LPCTSTR lpName,LPCTSTR lpType);
int __stdcall FindStringOrdinal(DWORD dwFindStringOrdinalFlags,LPCWSTR lpStringSource,int cchSource,LPCWSTR lpStringValue,int cchValue,BOOL bIgnoreCase);
int __stdcall FlsAlloc(PFLS_CALLBACK_FUNCTION lpCallback);
int __stdcall FlsFree(DWORD dwFlsIndex);
int __stdcall FlsGetValue(DWORD dwFlsIndex);
int __stdcall FlsSetValue(DWORD dwFlsIndex,PVOID lpFlsData);
int __stdcall FlushConsoleInputBuffer(HANDLE hConsoleInput);
int __stdcall FlushFileBuffers(HANDLE hFile);
int __stdcall FlushInstructionCache(HANDLE hProcess,LPCVOID lpBaseAddress,SIZE_T dwSize);
int __stdcall FlushProcessWriteBuffers();
int __stdcall FlushViewOfFile(LPCVOID lpBaseAddress,SIZE_T dwNumberOfBytesToFlush);
int __stdcall FoldString(DWORD dwMapFlags,LPCTSTR lpSrcStr,int cchSrc,LPTSTR lpDestStr,int cchDest);
int __stdcall FormatMessage(DWORD dwFlags,LPCVOID lpSource,DWORD dwMessageId,DWORD dwLanguageId,LPTSTR lpBuffer,DWORD nSize,va_list* Arguments);
int __stdcall FormatMessageA(DWORD dwFlags,LPCVOID lpSource,DWORD dwMessageId,DWORD dwLanguageId,LPTSTR lpBuffer,DWORD nSize,va_list* Arguments);
int __stdcall FreeConsole();
int __stdcall FreeEnvironmentStrings(LPTCH lpszEnvironmentBlock);
int __stdcall FreeEnvironmentStringsA(LPTCH lpszEnvironmentBlock);
int __stdcall FreeEnvironmentStringsW(LPTCH lpszEnvironmentBlock);
int __stdcall FreeLibrary(HMODULE hLibModule);
int __stdcall FreeLibraryAndExitThread(HMODULE hModule,DWORD dwExitCode);
int __stdcall FreeLibraryWhenCallbackReturns(PTP_CALLBACK_INSTANCE pci,HMODULE mod);
int __stdcall FreeResource(HGLOBAL HretResource);
int __stdcall FreeUserPhysicalPages(HANDLE hProcess,PULONG_PTR NumberOfPages,PULONG_PTR UserPfnArray);
int __stdcall GenerateConsoleCtrlEvent(DWORD dwCtrlEvent,DWORD dwProcessGroupId);
int __stdcall GetACP();
int __stdcall GetActiveProcessorCount(WORD GroupNumber);
int __stdcall GetActiveProcessorGroupCount();
int __stdcall GetApplicationRecoveryCallback(HANDLE hProcess,APPLICATION_RECOVERY_CALLBACK* pRecoveryCallback,PVOID* ppvParameter,DWORD dwPingInterval,DWORD dwFlags);
int __stdcall GetApplicationRestartSettings(HANDLE hProcess,PWSTR pwzCommandline,PDWORD pcchSize,PDWORD pdwFlags);
int __stdcall GetAtomName(ATOM nAtom,LPTSTR lpBuffer,int nSize);
int __stdcall GetAtomNameA(ATOM nAtom,LPTSTR lpBuffer,int nSize);
int __stdcall GetAtomNameW(ATOM nAtom,LPTSTR lpBuffer,int nSize);
int __stdcall GetBinaryType(LPCTSTR lpApplicationName,DWORD lpBinaryType);
int __stdcall GetBinaryTypeA(LPCTSTR lpApplicationName,DWORD lpBinaryType);
int __stdcall GetBinaryTypeW(LPCTSTR lpApplicationName,DWORD lpBinaryType);
int __stdcall GetCPInfo(UINT CodePage,LPCPINFO lpCPInfo);
int __stdcall GetCPInfoEx(UINT CodePage,DWORD dwFlags,LPCPINFOEX lpCPInfoEx);
int __stdcall GetCalendarDateFormatEx(LPCWSTR lpszLocale,DWORD dwFlags,const LPCALDATETIME lpCalDateTime,LPCWSTR lpFormat,LPWSTR lpDateStr,int cchDate);
int __stdcall GetCalendarInfo(LCID Locale,CALID Calendar,CALTYPE CalType,LPTSTR lpCalData,int cchData,LPDWORD lpValue);
int __stdcall GetCalendarInfoEx(LPCWSTR lpLocaleName,CALID Calendar,LPCWSTR lpReserved,CALTYPE CalType,LPWSTR lpCalData,int cchData,LPDWORD lpValue);
int __stdcall GetCalendarSupportedDateRange(CALID Calendar,LPCALDATETIME lpCalMinDateTime,LPCALDATETIME lpCalMaxDateTime);
int __stdcall GetCommConfig(HANDLE hCommDev,LPCOMMCONFIG lpCC,LPDWORD lpdwSize);
int __stdcall GetCommMask(HANDLE hFile,LPDWORD lpEvtMask);
int __stdcall GetCommModemStatus(HANDLE hFile,LPDWORD lpModemStat);
int __stdcall GetCommProperties(HANDLE hFile,LPCOMMPROP lpCommProp);
int __stdcall GetCommState(HANDLE hFile,LPDCB lpDCB);
int __stdcall GetCommTimeouts(HANDLE hFile,LPCOMMTIMEOUTS lpCommTimeouts);
int __stdcall GetCommandLine();
int __stdcall GetCommandLineA();
int __stdcall GetCommandLineW();
int __stdcall GetCompressedFileSize(LPCTSTR lpFileName,LPDWORD lpFileSizeHigh);
int __stdcall GetCompressedFileSizeTransacted(LPCTSTR lpFileName,LPDWORD lpFileSizeHigh,HANDLE hTransaction);
int __stdcall GetComputerName(LPTSTR lpBuffer,LPDWORD lpnSize);
int __stdcall GetComputerNameA(LPTSTR lpBuffer,LPDWORD nBufferSize);
int __stdcall GetComputerNameEx(COMPUTER_NAME_FORMAT NameType,LPTSTR lpBuffer,LPDWORD lpnSize);
int __stdcall GetComputerNameW(LPTSTR lpBuffer,LPDWORD nBufferSize);
int __stdcall GetConsoleAlias(LPTSTR lpSource,LPTSTR lpTargetBuffer,DWORD TargetBufferLength,LPTSTR lpExeName);
int __stdcall GetConsoleAliasExes(LPTSTR lpExeNameBuffer,DWORD ExeNameBufferLength);
int __stdcall GetConsoleAliasExesLength();
int __stdcall GetConsoleAliases(LPTSTR lpAliasBuffer,DWORD AliasBufferLength,LPTSTR lpExeName);
int __stdcall GetConsoleAliasesLength(LPTSTR lpExeName);
int __stdcall GetConsoleCP();
int __stdcall GetConsoleCursorInfo(HANDLE hConsoleOutput,PCONSOLE_CURSOR_INFO lpConsoleCursorInfo);
int __stdcall GetConsoleDisplayMode(LPDWORD lpdwMode);
int __stdcall GetConsoleFontSize(HANDLE hConsoleOutput,DWORD nFont);
int __stdcall GetConsoleHistoryInfo(PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo);
int __stdcall GetConsoleMode(HANDLE hConsoleHandle,DWORD lpMode);
int __stdcall GetConsoleOriginalTitle(LPTSTR lpConsoleTitle,DWORD nSize);
int __stdcall GetConsoleOutputCP();
int __stdcall GetConsoleProcessList(LPDWORD lpdwProcessList,DWORD dwProcessCount);
int __stdcall GetConsoleScreenBufferInfo(HANDLE hConsoleOutput,PCONSOLE_SCREEN_BUFFER_INFO lpConsoleScreenBufferInfo);
int __stdcall GetConsoleScreenBufferInfoEx(HANDLE hConsoleOutput,PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx);
int __stdcall GetConsoleSelectionInfo(PCONSOLE_SELECTION_INFO lpConsoleSelectionInfo);
int __stdcall GetConsoleTitle(LPTSTR lpConsoleTitle,DWORD nSize);
int __stdcall GetConsoleWindow();
int __stdcall GetCurrencyFormat(LCID Locale,DWORD dwFlags,LPCTSTR lpValue,const CURRENCYFMT* lpFormat,LPTSTR lpCurrencyStr,int cchCurrency);
int __stdcall GetCurrencyFormatA(LCID Locale,DWORD dwFlags,LPCTSTR lpValue,const CURRENCYFMT* lpFormat,LPTSTR lpCurrencyStr,int cchCurrency);
int __stdcall GetCurrencyFormatEx(LPCWSTR lpLocaleName,DWORD dwFlags,LPCWSTR lpValue,const CURRENCYFMT* lpFormat,LPWSTR lpCurrencyStr,int cchCurrency);
int __stdcall GetCurrencyFormatW(LCID Locale,DWORD dwFlags,LPCTSTR lpValue,const CURRENCYFMT* lpFormat,LPTSTR lpCurrencyStr,int cchCurrency);
int __stdcall GetCurrentActCtx(HANDLE* lphActCtx);
int __stdcall GetCurrentConsoleFont(HANDLE hConsoleOutput,BOOL bMaximumWindow,PCONSOLE_FONT_INFO lpConsoleCurrentFont);
int __stdcall GetCurrentConsoleFontEx(HANDLE hConsoleOutput,BOOL bMaximumWindow,PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx);
int __stdcall GetCurrentDirectory(DWORD nBufferLength,LPTSTR lpBuffer);
int __stdcall GetCurrentDirectoryA(DWORD nBufferSize,LPTSTR lpBuffer);
int __stdcall GetCurrentDirectoryW(DWORD nBufferSize,LPTSTR lpBuffer);
int __stdcall GetCurrentProcess();
int __stdcall GetCurrentProcessId();
int __stdcall GetCurrentProcessorNumber();
int __stdcall GetCurrentProcessorNumberEx(PPROCESSOR_NUMBER ProcNumber);
int __stdcall GetCurrentThread();
int __stdcall GetCurrentThreadId();
int __stdcall GetCurrentUmsThread();
int __stdcall GetDateFormat(LCID Locale,DWORD dwFlags,const SYSTEMTIME* lpDate,LPCTSTR lpFormat,LPTSTR lpDateStr,int cchDate);
int __stdcall GetDateFormatA(LCID Locale,DWORD dwFlags,const SYSTEMTIME* lpDate,LPCTSTR lpFormat,LPTSTR lpDateStr,int cchDate);
int __stdcall GetDateFormatEx(LPCWSTR lpLocaleName,DWORD dwFlags,const SYSTEMTIME* lpDate,LPCWSTR lpFormat,LPWSTR lpDateStr,int cchDate,LPCWSTR lpCalendar);
int __stdcall GetDateFormatW(LCID Locale,DWORD dwFlags,const SYSTEMTIME* lpDate,LPCTSTR lpFormat,LPTSTR lpDateStr,int cchDate);
int __stdcall GetDefaultCommConfig(LPCTSTR lpszName,LPCOMMCONFIG lpCC,LPDWORD lpdwSize);
int __stdcall GetDeviceDriverBaseName(LPVOID ImageBase,LPTSTR lpBaseName,DWORD nSize);
int __stdcall GetDeviceDriverFileName(LPVOID ImageBase,LPTSTR lpFilename,DWORD nSize);
int __stdcall GetDevicePowerState(HANDLE hDevice,BOOL* pfOn);
int __stdcall GetDiskFreeSpace(LPCTSTR lpRootPathName,LPDWORD lpSectorsPerCluster,LPDWORD lpBytesPerSector,LPDWORD lpNumberOfFreeClusters,LPDWORD lpTotalNumberOfClusters);
int __stdcall GetDiskFreeSpaceA(LPCTSTR lpRootPathName,LPDWORD lpSectorsPerCluster,LPDWORD lpBytesPerSector,LPDWORD lpNumberOfFreeClusters,LPDWORD lpTotalNumberOfClusters);
int __stdcall GetDiskFreeSpaceEx(LPCTSTR lpDirectoryName,PULARGE_INTEGER lpFreeBytesAvailable,PULARGE_INTEGER lpTotalNumberOfBytes,PULARGE_INTEGER lpTotalNumberOfFreeBytes);
int __stdcall GetDiskFreeSpaceExA(LPCTSTR lpDirectoryName,PULARGE_INTEGER lpFreeBytesAvailableToCaller,PULARGE_INTEGER lpTotalNumberOfBytes,PULARGE_INTEGER lpTotalNumberOfFreeBytes);
int __stdcall GetDiskFreeSpaceExW(LPCTSTR lpDirectoryName,PULARGE_INTEGER lpFreeBytesAvailableToCaller,PULARGE_INTEGER lpTotalNumberOfBytes,PULARGE_INTEGER lpTotalNumberOfFreeBytes);
int __stdcall GetDiskFreeSpaceW(LPCTSTR lpRootPathName,LPDWORD lpSectorsPerCluster,LPDWORD lpBytesPerSector,LPDWORD lpNumberOfFreeClusters,LPDWORD lpTotalNumberOfClusters);
int __stdcall GetDllDirectory(DWORD nBufferLength,LPTSTR lpBuffer);
int __stdcall GetDurationFormat(LCID Locale,DWORD dwFlags,const SYSTEMTIME* lpDuration,ULONGLONG ullDuration,LPCWSTR lpFormat,LPWSTR lpDurationStr,int cchDuration);
int __stdcall GetDurationFormatEx(LPCWSTR lpLocaleName,DWORD dwFlags,const SYSTEMTIME* lpDuration,ULONGLONG ullDuration,LPCWSTR lpFormat,LPWSTR lpDurationStr,int cchDuration);
int __stdcall GetDynamicTimeZoneInformation(PDYNAMIC_TIME_ZONE_INFORMATION pTimeZoneInformation);
int __stdcall GetEnabledExtendedFeatures(DWORD64 FeatureMask);
int __stdcall GetEnvironmentStrings();
int __stdcall GetEnvironmentStringsW();
int __stdcall GetEnvironmentVariable(LPCTSTR lpName,LPTSTR lpBuffer,DWORD nSize);
int __stdcall GetEnvironmentVariableA(LPCTSTR lpName,LPTSTR lpBuffer,DWORD nBufferSize);
int __stdcall GetEnvironmentVariableW(LPCTSTR lpName,LPTSTR lpBuffer,DWORD nBufferSize);
int __stdcall GetErrorMode();
int __stdcall GetExitCodeProcess(HANDLE hProcess,LPDWORD lpExitCode);
int __stdcall GetExitCodeThread(HANDLE hThread,LPDWORD lpExitCode);
int __stdcall GetExtendedContextLength(DWORD ContextFlags,PDWORD ContextLength);
int __stdcall GetExtendedFeaturesMask(PCONTEXT_EX ContextEx);
int __stdcall GetFileAttributes(LPCTSTR lpFileName);
int __stdcall GetFileAttributesA(LPCTSTR lpFileName);
int __stdcall GetFileAttributesEx(LPCTSTR lpFileName,GET_FILEEX_INFO_LEVELS fInfoLevelId,LPVOID lpFileInformation);
int __stdcall GetFileAttributesTransacted(LPCTSTR lpFileName,GET_FILEEX_INFO_LEVELS fInfoLevelId,LPVOID lpFileInformation,HANDLE hTransaction);
int __stdcall GetFileAttributesW(LPCTSTR lpFileName);
int __stdcall GetFileBandwidthReservation(HANDLE hFile,LPDWORD lpPeriodMilliseconds,LPDWORD lpBytesPerPeriod,LPBOOL pDiscardable,LPDWORD lpTransferSize,LPDWORD lpNumOutstandingRequests);
int __stdcall GetFileInformationByHandle(HANDLE hFile,LPBY_HANDLE_FILE_INFORMATION lpFileInformation);
int __stdcall GetFileInformationByHandleEx(HANDLE hFile,FILE_INFO_BY_HANDLE_CLASS FileInformationClass,LPVOID lpFileInformation,DWORD dwBufferSize);
int __stdcall GetFileSize(HANDLE hFile,LPDWORD lpFileSizeHigh);
int __stdcall GetFileSizeEx(HANDLE hFile,PLARGE_INTEGER lpFileSize);
int __stdcall GetFileTime(HANDLE hFile,LPFILETIME lpCreationTime,LPFILETIME lpLastAccessTime,LPFILETIME lpLastWriteTime);
int __stdcall GetFileType(HANDLE hFile);
int __stdcall GetFinalPathNameByHandle(HANDLE hFile,LPTSTR lpszFilePath,DWORD cchFilePath,DWORD dwFlags);
int __stdcall GetFirmwareEnvironmentVariable(LPCTSTR lpName,LPCTSTR lpGuid,PVOID pBuffer,DWORD nSize);
int __stdcall GetFullPathName(LPCTSTR lpFileName,DWORD nBufferLength,LPTSTR lpBuffer,LPTSTR* lpFilePart);
int __stdcall GetFullPathNameA(LPCTSTR lpFileName,DWORD nBufferSize,LPTSTR lpBuffer,LPTSTR* lpFilePart);
int __stdcall GetFullPathNameTransacted(LPCTSTR lpFileName,DWORD nBufferLength,LPTSTR lpBuffer,LPTSTR* lpFilePart,HANDLE hTransaction);
int __stdcall GetFullPathNameW(LPCTSTR lpFileName,DWORD nBufferSize,LPTSTR lpBuffer,LPTSTR* lpFilePart);
int __stdcall GetGeoInfo(GEOID Location,GEOTYPE GeoType,LPTSTR lpGeoData,int cchData,LANGID LangId);
int __stdcall GetHandleInformation(HANDLE hObject,LPDWORD lpdwFlags);
int __stdcall GetLargePageMinimum();
int __stdcall GetLargestConsoleWindowSize(HANDLE hConsoleOutput);
int __stdcall GetLastError();
int __stdcall GetLocalTime(LPSYSTEMTIME lpSystemTime);
int __stdcall GetLocaleInfo(LCID Locale,LCTYPE LCType,LPTSTR lpLCData,int cchData);
int __stdcall GetLocaleInfoA(LCID Locale,LCTYPE LCType,LPTSTR lpLCData,int cchData);
int __stdcall GetLocaleInfoEx(LPCWSTR lpLocaleName,LCTYPE LCType,LPWSTR lpLCData,int cchData);
int __stdcall GetLocaleInfoW(LCID Locale,LCTYPE LCType,LPTSTR lpLCData,int cchData);
int __stdcall GetLogicalProcessorInformation(PSYSTEM_LOGICAL_PROCESSOR_INFORMATION Buffer,PDWORD ReturnLength);
int __stdcall GetLogicalProcessorInformationEx(LOGICAL_PROCESSOR_RELATIONSHIP RelationshipType,PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX Buffer,PDWORD ReturnedLength);
int __stdcall GetLongPathName(LPCTSTR lpszShortPath,LPTSTR lpszLongPath,DWORD cchBuffer);
int __stdcall GetLongPathNameA(LPCTSTR lpszShortPath,LPTSTR lpBuffer,DWORD nBuffer);
int __stdcall GetLongPathNameTransacted(LPCTSTR lpszShortPath,LPTSTR lpszLongPath,DWORD cchBuffer,HANDLE hTransaction);
int __stdcall GetLongPathNameW(LPCTSTR lpszShortPath,LPTSTR lpBuffer,DWORD nBuffer);
int __stdcall GetMailslotInfo(HANDLE hMailslot,LPDWORD lpMaxMessageSize,LPDWORD lpNextSize,LPDWORD lpMessageCount,LPDWORD lpReadTimeout);
int __stdcall GetMappedFileName(HANDLE hProcess,LPVOID lpv,LPTSTR lpFilename,DWORD nSize);
int __stdcall GetMaximumProcessorCount(WORD GroupNumber);
int __stdcall GetMaximumProcessorGroupCount();
int __stdcall GetModuleBaseName(HANDLE hProcess,HMODULE hModule,LPTSTR lpBaseName,DWORD nSize);
int __stdcall GetModuleFileName(HMODULE hModule,LPTSTR lpFilename,DWORD nSize);
int __stdcall GetModuleFileNameA(HMODULE hModule,LPTSTR lpBuffer,DWORD nBufferSize);
int __stdcall GetModuleFileNameEx(HANDLE hProcess,HMODULE hModule,LPTSTR lpFilename,DWORD nSize);
int __stdcall GetModuleFileNameExA(HANDLE hProcess,HMODULE hModule,LPTSTR lpBuffer,DWORD nBufferSize);
int __stdcall GetModuleFileNameExW(HANDLE hProcess,HMODULE hModule,LPTSTR lpBuffer,DWORD nBufferSize);
int __stdcall GetModuleFileNameW(HMODULE hModule,LPTSTR lpBuffer,DWORD nBufferSize);
int __stdcall GetModuleHandle(LPCTSTR lpModuleName);
int __stdcall GetModuleHandleA(LPCTSTR lpModuleName);
int __stdcall GetModuleHandleEx(DWORD dwFlags,LPCTSTR lpModuleName,HMODULE* phModule);
int __stdcall GetModuleHandleW(LPCTSTR lpModuleName);
int __stdcall GetModuleInformation(HANDLE hProcess,HMODULE hModule,LPMODULEINFO lpmodinfo,DWORD dwSizemodinfo);
int __stdcall GetNLSVersion(NLS_FUNCTION Function,LCID Locale,LPNLSVERSIONINFO lpVersionInformation);
int __stdcall GetNLSVersionEx(NLS_FUNCTION function,LPCWSTR lpLocaleName,LPNLSVERSIONINFOEX lpVersionInformation);
int __stdcall GetNativeSystemInfo(LPSYSTEM_INFO lpSystemInfo);
int __stdcall GetNextUmsListItem(PUMS_CONTEXT UmsContext);
int __stdcall GetNumaAvailableMemoryNode(UCHAR Node,PULONGLONG AvailableBytes);
int __stdcall GetNumaAvailableMemoryNodeEx(USHORT Node,PULONGLONG AvailableBytes);
int __stdcall GetNumaHighestNodeNumber(PULONG HighestNodeNumber);
int __stdcall GetNumaNodeNumberFromHandle(HANDLE hFile,PUSHORT NodeNumber);
int __stdcall GetNumaNodeProcessorMask(UCHAR Node,PULONGLONG ProcessorMask);
int __stdcall GetNumaNodeProcessorMaskEx(USHORT Node,PGROUP_AFFINITY ProcessorMask);
int __stdcall GetNumaProcessorNode(UCHAR Processor,PUCHAR NodeNumber);
int __stdcall GetNumaProcessorNodeEx(PPROCESSOR_NUMBER Processor,PUSHORT NodeNumber);
int __stdcall GetNumaProximityNode(ULONG ProximityId,PUCHAR NodeNumber);
int __stdcall GetNumaProximityNodeEx(ULONG ProximityId,PUSHORT NodeNumber);
int __stdcall GetNumberFormat(LCID Locale,DWORD dwFlags,LPCTSTR lpValue,const NUMBERFMT* lpFormat,LPTSTR lpNumberStr,int cchNumber);
int __stdcall GetNumberFormatA(LCID Locale,DWORD dwFlags,LPCTSTR lpValue,const NUMBERFMT* lpFormat,LPTSTR lpNumberStr,int cchNumber);
int __stdcall GetNumberFormatEx(LPCWSTR lpLocaleName,DWORD dwFlags,LPCWSTR lpValue,const NUMBERFMT* lpFormat,LPWSTR lpNumberStr,int cchNumber);
int __stdcall GetNumberFormatW(LCID Locale,DWORD dwFlags,LPCTSTR lpValue,const NUMBERFMT* lpFormat,LPTSTR lpNumberStr,int cchNumber);
int __stdcall GetNumberOfConsoleInputEvents(HANDLE hConsoleInput,LPDWORD lpcNumberOfEvents);
int __stdcall GetNumberOfConsoleMouseButtons(LPDWORD lpNumberOfMouseButtons);
int __stdcall GetOEMCP();
int __stdcall GetOverlappedResult(HANDLE hFile,LPOVERLAPPED lpOverlapped,LPDWORD lpNumberOfBytesTransferred,BOOL bWait);
int __stdcall GetPerformanceInfo(PPERFORMANCE_INFORMATION pPerformanceInformation,DWORD cb);
int __stdcall GetPhysicallyInstalledSystemMemory(PULONGLONG TotalMemoryInKilobytes);
int __stdcall GetPriorityClass(HANDLE hProcess);
int __stdcall GetPrivateProfileInt(LPCTSTR lpAppName,LPCTSTR lpKeyName,INT nDefault,LPCTSTR lpFileName);
int __stdcall GetPrivateProfileIntA(LPCTSTR lpAppName,LPCTSTR lpKeyName,INT nDefault,LPCTSTR lpFileName);
int __stdcall GetPrivateProfileIntW(LPCTSTR lpAppName,LPCTSTR lpKeyName,INT nDefault,LPCTSTR lpFileName);
int __stdcall GetPrivateProfileSection(LPCTSTR lpAppName,LPTSTR lpReturnedString,DWORD nSize,LPCTSTR lpFileName);
int __stdcall GetPrivateProfileSectionA(LPCTSTR lpAppName,LPTSTR lpReturnedString,DWORD nSize,LPCTSTR lpFileName);
int __stdcall GetPrivateProfileSectionNames(LPTSTR lpszReturnBuffer,DWORD nSize,LPCTSTR lpFileName);
int __stdcall GetPrivateProfileSectionW(LPCTSTR lpAppName,LPTSTR lpReturnedString,DWORD nSize,LPCTSTR lpFileName);
int __stdcall GetPrivateProfileString(LPCTSTR lpAppName,LPCTSTR lpKeyName,LPCTSTR lpDefault,LPTSTR lpReturnedString,DWORD nSize,LPCTSTR lpFileName);
int __stdcall GetPrivateProfileStringA(LPCTSTR lpAppName,LPCTSTR lpKeyName,LPCTSTR lpDefault,LPTSTR lpBuffer,DWORD nSize,LPCTSTR lpFileName);
int __stdcall GetPrivateProfileStringW(LPCTSTR lpAppName,LPCTSTR lpKeyName,LPCTSTR lpDefault,LPTSTR lpBuffer,DWORD nSize,LPCTSTR lpFileName);
int __stdcall GetPrivateProfileStruct(LPCTSTR lpszSection,LPCTSTR lpszKey,LPVOID lpStruct,UINT uSizeStruct,LPCTSTR szFile);
int __stdcall GetPrivateProfileStructA(LPCTSTR lpszSection,LPCTSTR lpszKey,LPVOID lpStruct,UINT uSizeStruct,LPCTSTR szFile);
int __stdcall GetProcAddress(HMODULE hModule,LPCSTR lpProcName);
int __stdcall GetProcessAffinityMask(HANDLE hProcess,PDWORD_PTR lpProcessAffinityMask,PDWORD_PTR lpSystemAffinityMask);
int __stdcall GetProcessDEPPolicy(HANDLE hProcess,LPDWORD lpFlags,PBOOL lpPermanent);
int __stdcall GetProcessGroupAffinity(HANDLE hProcess,PUSHORT GroupCount,PUSHORT GroupArray);
int __stdcall GetProcessHandleCount(HANDLE hProcess,PDWORD pdwHandleCount);
int __stdcall GetProcessHeap();
int __stdcall GetProcessHeaps(DWORD NumberOfHeaps,PHANDLE ProcessHeaps);
int __stdcall GetProcessId(HANDLE Process);
int __stdcall GetProcessIdOfThread(HANDLE Thread);
int __stdcall GetProcessImageFileName(HANDLE hProcess,LPTSTR lpImageFileName,DWORD nSize);
int __stdcall GetProcessIoCounters(HANDLE hProcess,PIO_COUNTERS lpIoCounters);
int __stdcall GetProcessMemoryInfo(HANDLE Process,PPROCESS_MEMORY_COUNTERS ppsmemCounters,DWORD cb);
int __stdcall GetProcessPriorityBoost(HANDLE hProcess,PBOOL pDisablePriorityBoost);
int __stdcall GetProcessShutdownParameters(LPDWORD lpdwLevel,LPDWORD lpdwFlags);
int __stdcall GetProcessTimes(HANDLE hProcess,LPFILETIME lpCreationTime,LPFILETIME lpExitTime,LPFILETIME lpKernelTime,LPFILETIME lpUserTime);
int __stdcall GetProcessVersion(DWORD ProcessId);
int __stdcall GetProcessWorkingSetSize(HANDLE hProcess,PSIZE_T lpMinimumWorkingSetSize,PSIZE_T lpMaximumWorkingSetSize);
int __stdcall GetProcessWorkingSetSizeEx(HANDLE hProcess,PSIZE_T lpMinimumWorkingSetSize,PSIZE_T lpMaximumWorkingSetSize,PDWORD Flags);
int __stdcall GetProcessorSystemCycleTime(USHORT Group,PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION Buffer,PDWORD ReturnedLength);
int __stdcall GetProductInfo(DWORD dwOSMajorVersion,DWORD dwOSMinorVersion,DWORD dwSpMajorVersion,DWORD dwSpMinorVersion,DWORD pdwReturnedProductType);
UINT __stdcall GetProfileInt(LPCTSTR lpAppName,LPCTSTR lpKeyName,INT nDefault);
UINT __stdcall GetProfileIntA(LPCTSTR lpAppName,LPCTSTR lpKeyName,INT nDefault);
UINT __stdcall GetProfileIntW(LPCTSTR lpAppName,LPCWSTR lpKeyName,INT nDefault);
int __stdcall GetProfileSection(LPCTSTR lpAppName,LPTSTR lpReturnedString,DWORD nSize);
int __stdcall GetProfileSectionA(LPCTSTR lpAppName,LPTSTR lpReturnedString,DWORD nSize);
int __stdcall GetProfileSectionW(LPCTSTR lpAppName,LPTSTR lpReturnedString,DWORD nSize);
int __stdcall GetProfileString(LPCTSTR lpAppName,LPCTSTR lpKeyName,LPCTSTR lpDefault,LPTSTR lpReturnedString,DWORD nSize);
int __stdcall GetProfileStringA(LPCTSTR lpAppName,LPCTSTR lpKeyName,LPCTSTR lpDefault,LPTSTR lpReturnedString,DWORD nSize);
int __stdcall GetProfileStringW(LPCTSTR lpAppName,LPCTSTR lpKeyName,LPCTSTR lpDefault,LPTSTR lpReturnedString,DWORD nSize);
int __stdcall GetQueuedCompletionStatus(HANDLE CompletionPort,LPDWORD lpNumberOfBytes,PULONG_PTR lpCompletionKey,LPOVERLAPPED* lpOverlapped,DWORD dwMilliseconds);
int __stdcall GetQueuedCompletionStatusEx(HANDLE CompletionPort,LPOVERLAPPED_ENTRY lpCompletionPortEntries,ULONG ulCount,PULONG ulNumEntriesRemoved,DWORD dwMilliseconds,BOOL fAlertable);
int __stdcall GetShortPathName(LPCTSTR lpszLongPath,LPTSTR lpszShortPath,DWORD cchBuffer);
int __stdcall GetShortPathNameA(LPCTSTR lpszLongPath,LPTSTR lpBuffer,DWORD cchBuffer);
int __stdcall GetShortPathNameW(LPCTSTR lpszLongPath,LPTSTR lpBuffer,DWORD cchBuffer);
int __stdcall GetStartupInfo(LPSTARTUPINFO lpStartupInfo);
int __stdcall GetStartupInfoA(LPSTARTUPINFO lpStartupInfo);
int __stdcall GetStartupInfoW(LPSTARTUPINFO lpStartupInfo);
int __stdcall GetStdHandle(DWORD nStdHandle);
int __stdcall GetStringScripts(DWORD dwFlags,LPCWSTR lpString,int cchString,LPWSTR lpScripts,int cchScripts);
int __stdcall GetStringTypeA(LCID Locale,DWORD dwInfoType,LPCSTR lpSrcStr,int cchSrc,LPWORD lpCharType);
int __stdcall GetStringTypeEx(LCID Locale,DWORD dwInfoType,LPCTSTR lpSrcStr,int cchSrc,LPWORD lpCharType);
int __stdcall GetStringTypeExA(LCID Locale,DWORD dwInfoType,LPCTSTR lpSrcStr,int cchSrc,LPWORD lpCharType);
int __stdcall GetStringTypeExW(LCID Locale,DWORD dwInfoType,LPCTSTR lpSrcStr,int cchSrc,LPWORD lpCharType);
int __stdcall GetStringTypeW(DWORD Locale,LPCWSTR dwInfoType,int lpSrcStr,LPWORD cchSrc,LPWORD lpCharType);
int __stdcall GetSystemDEPPolicy();
int __stdcall GetSystemDefaultLCID();
int __stdcall GetSystemDefaultLangID();
int __stdcall GetSystemDefaultLocaleName(LPWSTR lpLocaleName,int cchLocaleName);
int __stdcall GetSystemDirectory(LPTSTR lpBuffer,UINT uSize);
int __stdcall GetSystemDirectoryA(LPTSTR lpBuffer,UINT nBufferSize);
int __stdcall GetSystemDirectoryW(LPTSTR lpBuffer,UINT nBufferSize);
int __stdcall GetSystemFileCacheSize(PSIZE_T lpMinimumFileCacheSize,PSIZE_T lpMaximumFileCacheSize,PDWORD lpFlags);
int __stdcall GetSystemFirmwareTable(DWORD FirmwareTableProviderSignature,DWORD FirmwareTableID,PVOID pFirmwareTableBuffer,DWORD BufferSize);
int __stdcall GetSystemInfo(LPSYSTEM_INFO lpSystemInfo);
int __stdcall GetSystemPowerStatus(LPSYSTEM_POWER_STATUS lpSystemPowerStatus);
int __stdcall GetSystemRegistryQuota(PDWORD pdwQuotaAllowed,PDWORD pdwQuotaUsed);
int __stdcall GetSystemTime(LPSYSTEMTIME lpSystemTime);
int __stdcall GetSystemTimeAdjustment(PDWORD lpTimeAdjustment,PDWORD lpTimeIncrement,PBOOL lpTimeAdjustmentDisabled);
int __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime);
int __stdcall GetSystemTimes(LPFILETIME lpIdleTime,LPFILETIME lpKernelTime,LPFILETIME lpUserTime);
int __stdcall GetSystemWindowsDirectory(LPTSTR lpBuffer,UINT uSize);
int __stdcall GetSystemWow64Directory(LPTSTR lpBuffer,UINT uSize);
int __stdcall GetTapeParameters(HANDLE hDevice,DWORD dwOperation,LPDWORD lpdwSize,LPVOID lpTapeInformation);
int __stdcall GetTapePosition(HANDLE hDevice,DWORD dwPositionType,LPDWORD lpdwPartition,LPDWORD lpdwOffsetLow,LPDWORD lpdwOffsetHigh);
int __stdcall GetTapeStatus(HANDLE hDevice);
int __stdcall GetTempFileName(LPCTSTR lpPathName,LPCTSTR lpPrefixString,UINT uUnique,LPTSTR lpTempFileName);
int __stdcall GetTempFileNameA(LPCTSTR lpPathName,LPCTSTR lpPrefixString,UINT uUnique,LPTSTR lpTempFileName);
int __stdcall GetTempFileNameW(LPCTSTR lpPathName,LPCTSTR lpPrefixString,UINT uUnique,LPTSTR lpTempFileName);
int __stdcall GetTempPath(DWORD nBufferLength,LPTSTR lpBuffer);
int __stdcall GetTempPathA(DWORD nBufferSize,LPTSTR lpBuffer);
int __stdcall GetTempPathW(DWORD nBufferSize,LPTSTR lpBuffer);
int __stdcall GetThreadContext(HANDLE hThread,LPCONTEXT lpContext);
int __stdcall GetThreadErrorMode();
int __stdcall GetThreadGroupAffinity(HANDLE hThread,PGROUP_AFFINITY GroupAffinity);
int __stdcall GetThreadIOPendingFlag(HANDLE hThread,PBOOL lpIOIsPending);
int __stdcall GetThreadId(HANDLE Thread);
int __stdcall GetThreadIdealProcessorEx(HANDLE hThread,PPROCESSOR_NUMBER lpIdealProcessor);
int __stdcall GetThreadLocale();
int __stdcall GetThreadPriority(HANDLE hThread);
int __stdcall GetThreadPriorityBoost(HANDLE hThread,PBOOL pDisablePriorityBoost);
int __stdcall GetThreadSelectorEntry(HANDLE hThread,DWORD dwSelector,LPLDT_ENTRY lpSelectorEntry);
int __stdcall GetThreadTimes(HANDLE hThread,LPFILETIME lpCreationTime,LPFILETIME lpExitTime,LPFILETIME lpKernelTime,LPFILETIME lpUserTime);
int __stdcall GetTickCount();
int __stdcall GetTickCount64();
int __stdcall GetTimeFormat(LCID Locale,DWORD dwFlags,const SYSTEMTIME* lpTime,LPCTSTR lpFormat,LPTSTR lpTimeStr,int cchTime);
int __stdcall GetTimeFormatA(LCID Locale,DWORD dwFlags,const SYSTEMTIME* lpTime,LPCTSTR lpFormat,LPTSTR lpTimeStr,int cchTime);
int __stdcall GetTimeFormatEx(LPCWSTR lpLocaleName,DWORD dwFlags,const SYSTEMTIME* lpTime,LPCWSTR lpFormat,LPWSTR lpTimeStr,int cchTime);
int __stdcall GetTimeFormatW(LCID Locale,DWORD dwFlags,const SYSTEMTIME* lpTime,LPCTSTR lpFormat,LPTSTR lpTimeStr,int cchTime);
int __stdcall GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation);
int __stdcall GetTimeZoneInformationForYear(USHORT wYear,PDYNAMIC_TIME_ZONE_INFORMATION pdtzi,LPTIME_ZONE_INFORMATION ptzi);
int __stdcall GetUmsCompletionListEvent(PUMS_COMPLETION_LIST UmsCompletionList,PHANDLE UmsCompletionEvent);
int __stdcall GetUserDefaultLCID();
int __stdcall GetUserDefaultLangID();
int __stdcall GetUserDefaultLocaleName(LPWSTR lpLocaleName,int cchLocaleName);
int __stdcall GetUserGeoID(GEOCLASS GeoClass);
int __stdcall GetVersion();
bool __stdcall GetVersionEx(LPOSVERSIONINFO lpVersionInfo);
bool __stdcall GetVersionExA(LPOSVERSIONINFO lpVersionInformation);
bool __stdcall GetVersionExW(LPOSVERSIONINFO lpVersionInformation);
int __stdcall GetWindowsDirectory(LPTSTR lpBuffer,UINT uSize);
int __stdcall GetWindowsDirectoryA(LPTSTR lpBuffer,UINT nBufferSize);
int __stdcall GetWindowsDirectoryW(LPTSTR lpBuffer,UINT nBufferSize);
int __stdcall GetWriteWatch(DWORD dwFlags,PVOID lpBaseAddress,SIZE_T dwRegionSize,PVOID* lpAddresses,PULONG_PTR lpdwCount,PULONG lpdwGranularity);
int __stdcall GetWsChanges(HANDLE hProcess,PPSAPI_WS_WATCH_INFORMATION lpWatchInfo,DWORD cb);
int __stdcall GetWsChangesEx(HANDLE hProcess,PPSAPI_WS_WATCH_INFORMATION_EX lpWatchInfoEx,DWORD cb);
int __stdcall GlobalAddAtom(LPCTSTR lpString);
int __stdcall GlobalAddAtomA(LPCTSTR lpString);
int __stdcall GlobalAddAtomW(LPCTSTR lpString);
int __stdcall GlobalAlloc(UINT uFlags,SIZE_T dwBytes);
int __stdcall GlobalDeleteAtom(ATOM nAtom);
int __stdcall GlobalFindAtom(LPCTSTR lpString);
int __stdcall GlobalFindAtomA(LPCTSTR AtomName);
int __stdcall GlobalFindAtomW(LPCTSTR AtomName);
int __stdcall GlobalFlags(HGLOBAL hMem);
int __stdcall GlobalFree(HGLOBAL hMem);
int __stdcall GlobalGetAtomName(ATOM nAtom,LPTSTR lpBuffer,int nSize);
int __stdcall GlobalGetAtomNameA(ATOM nAtom,LPTSTR lpBuffer,int nBufferSize);
int __stdcall GlobalGetAtomNameW(ATOM nAtom,LPTSTR lpBuffer,int nBufferSize);
int __stdcall GlobalHandle(LPCVOID hMem);
int __stdcall GlobalLock(HGLOBAL hMem);
int __stdcall GlobalMemoryStatus(LPMEMORYSTATUS lpMemBuffer);
int __stdcall GlobalMemoryStatusEx(LPMEMORYSTATUSEX lpBuffer);
int __stdcall GlobalReAlloc(HGLOBAL hMem,SIZE_T dwBytes,UINT uFlags);
int __stdcall GlobalSize(HGLOBAL hMem);
int __stdcall GlobalUnlock(HGLOBAL hMem);
int __stdcall Heap32First(LPHEAPENTRY32 lphe,DWORD th32ProcessID,ULONG_PTR th32HeapID);
int __stdcall Heap32ListFirst(HANDLE hSnapshot,LPHEAPLIST32 lphl);
int __stdcall Heap32ListNext(HANDLE hSnapshot,LPHEAPLIST32 lphl);
int __stdcall Heap32Next(LPHEAPENTRY32 lphe);
int __stdcall HeapAlloc(HANDLE hHeap,DWORD Flags,SIZE_T HeapSize);
int __stdcall HeapCompact(HANDLE hHeap,DWORD dwFlags);
int __stdcall HeapCreate(DWORD flOptions,SIZE_T dwInitialSize,SIZE_T dwMaximumSize);
int __stdcall HeapDestroy(HANDLE hHeap);
int __stdcall HeapFree(HANDLE hHeap);
int __stdcall HeapLock(HANDLE hHeap);
int __stdcall HeapQueryInformation(HANDLE HeapHandle,HEAP_INFORMATION_CLASS HeapInformationClass,PVOID HeapInformation,SIZE_T HeapInformationLength,PSIZE_T ReturnLength);
int __stdcall HeapReAlloc(HANDLE hHeap,DWORD Flags,LPVOID pMemory,SIZE_T NewSize);
int __stdcall HeapSetInformation(HANDLE HeapHandle,HEAP_INFORMATION_CLASS HeapInformationClass,PVOID HeapInformation,SIZE_T HeapInformationLength);
int __stdcall HeapSize(HANDLE hHeap,DWORD dwFlags,LPCVOID lpMem);
int __stdcall HeapUnlock(HANDLE hHeap);
int __stdcall HeapValidate(HANDLE hHeap,DWORD dwFlags,LPCVOID lpMem);
int __stdcall HeapWalk(HANDLE hHeap,LPPROCESS_HEAP_ENTRY lpEntry);
int __stdcall InitAtomTable(DWORD nSize);
int __stdcall InitOnceBeginInitialize(LPINIT_ONCE lpInitOnce,DWORD dwFlags,PBOOL fPending,LPVOID* lpContext);
int __stdcall InitOnceComplete(LPINIT_ONCE lpInitOnce,DWORD dwFlags,LPVOID lpContext);
int __stdcall InitOnceExecuteOnce(PINIT_ONCE InitOnce,PINIT_ONCE_FN InitFn,PVOID Parameter,LPVOID* Context);
int __stdcall InitOnceInitialize(PINIT_ONCE InitOnce);
int __stdcall InitializeConditionVariable(PCONDITION_VARIABLE ConditionVariable);
int __stdcall InitializeCriticalSection(LPCRITICAL_SECTION lpCriticalSection);
int __stdcall InitializeCriticalSectionAndSpinCount(LPCRITICAL_SECTION lpCriticalSection);
int __stdcall InitializeCriticalSectionEx(LPCRITICAL_SECTION lpCriticalSection,DWORD dwSpinCount,DWORD Flags);
int __stdcall InitializeExtendedContext(PVOID Context,DWORD ContextFlags,PCONTEXT_EX* ContextEx);
int __stdcall InitializeProcThreadAttributeList(LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,DWORD dwAttributeCount,DWORD dwFlags,PSIZE_T lpSize);
int __stdcall InitializeProcessForWsWatch(HANDLE hProcess);
int __stdcall InitializeSListHead(PSLIST_HEADER ListHead);
int __stdcall InitializeSRWLock(PSRWLOCK SRWLock);
int __stdcall InterlockedCompareExchange(LONG volatile* Destination,LONG Exchange,LONG Comperand);
int __stdcall InterlockedCompareExchange64(LONGLONG volatile* Destination,LONGLONG Exchange,LONGLONG Comparand);
int __stdcall InterlockedDecrement(LONG volatile* lpAddend);
int __stdcall InterlockedExchange(DWORD Target,DWORD Value);
int __stdcall InterlockedExchange(LONG volatile* Target,LONG Value);
int __stdcall InterlockedExchangeAdd(LONG volatile* Addend,LONG Increment);
int __stdcall InterlockedFlushSList(PSLIST_HEADER ListHead);
int __stdcall InterlockedIncrement(LONG volatile* lpAddend);
int __stdcall InterlockedPopEntrySList(PSLIST_HEADER ListHead);
int __stdcall InterlockedPushEntrySList(PSLIST_HEADER ListHead,PSLIST_ENTRY ListEntry);
int __stdcall IsBadCodePtr(FARPROC lpfn);
int __stdcall IsBadReadPtr(const VOID* lp,UINT_PTR ucb);
int __stdcall IsBadStringPtr(LPCTSTR lpsz,UINT_PTR ucchMax);
int __stdcall IsBadStringPtrA(LPCTSTR lpsz,UINT_PTR ucchMax);
int __stdcall IsBadStringPtrW(LPCTSTR lpsz,UINT_PTR ucchMax);
int __stdcall IsBadWritePtr(LPVOID lp,UINT_PTR ucb);
int __stdcall IsCalendarLeapYear(CALID calId,UINT year,UINT era);
int __stdcall IsDBCSLeadByte(BYTE TestChar);
int __stdcall IsDBCSLeadByteEx(UINT CodePage,BYTE TestChar);
int __stdcall IsDebuggerPresent();
int __stdcall IsNLSDefinedString(NLS_FUNCTION Function,DWORD dwFlags,LPNLSVERSIONINFO lpVersionInformation,LPCWSTR lpString,INT cchStr);
int __stdcall IsProcessInJob(HANDLE ProcessHandle,HANDLE JobHandle,PBOOL Result);
int __stdcall IsProcessorFeaturePresent(DWORD ProcessorFeature);
int __stdcall IsSystemResumeAutomatic();
int __stdcall IsThreadAFiber();
int __stdcall IsThreadpoolTimerSet(PTP_TIMER pti);
int __stdcall IsValidCodePage(UINT CodePage);
int __stdcall IsValidLanguageGroup(LGRPID LanguageGroup,DWORD dwFlags);
int __stdcall IsValidLocale(LCID Locale,DWORD dwFlags);
int __stdcall IsValidLocaleName(LPCWSTR lpLocaleName);
int __stdcall IsWow64Process(HANDLE hProcess,PBOOL Wow64Process);
int __stdcall LCIDToLocaleName(LCID Locale,LPWSTR lpName,int cchName,DWORD dwFlags);
int __stdcall LCMapString(LCID Locale,DWORD dwMapFlags,LPCTSTR lpSrcStr,int cchSrc,LPTSTR lpDestStr,int cchDest);
int __stdcall LCMapStringA(LCID Locale,DWORD dwCmpFlags,LPCTSTR lpString1,int cchCount1,LPTSTR lpString2,int cchCount2);
int __stdcall LCMapStringEx(LPCWSTR lpLocaleName,DWORD dwMapFlags,LPCWSTR lpSrcStr,int cchSrc,LPWSTR lpDestStr,int cchDest,LPNLSVERSIONINFO lpVersionInformation,LPVOID lpReserved,LPARAM lParam);
int __stdcall LCMapStringW(LCID Locale,DWORD dwMapFlags,LPCTSTR lpSrcStr,int cchSrc,LPTSTR lpDestStr,int cchDest);
int __stdcall LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection);
int __stdcall LeaveCriticalSectionWhenCallbackReturns(PTP_CALLBACK_INSTANCE pci,PCRITICAL_SECTION pcs);
int __stdcall LoadLibrary(LPCTSTR lpFileName);
int __stdcall LoadLibraryA(LPCTSTR lpLibFileName);
int __stdcall LoadLibraryEx(LPCTSTR lpFileName,HANDLE hFile,DWORD dwFlags);
int __stdcall LoadLibraryExA(LPCTSTR pLibFileName,HANDLE hFile,DWORD dwFlags);
int __stdcall LoadLibraryExW(LPCTSTR pLibFileName,HANDLE hFile,DWORD dwFlags);
int __stdcall LoadLibraryW(LPCTSTR lpLibFileName);
int __stdcall LoadModule(LPCSTR lpModuleName,LPVOID lpParameterBlock);
int __stdcall LoadResource(HMODULE hModule,HRSRC hResInfo);
HLOCAL __stdcall LocalAlloc(UINT uFlags,SIZE_T uBytes);
int __stdcall LocalFileTimeToFileTime(const FILETIME* lpLocalFileTime,LPFILETIME lpFileTime);
int __stdcall LocalFlags(HLOCAL hMem);
int __stdcall LocalFree(HLOCAL hMem);
int __stdcall LocalHandle(LPCVOID pMem);
int __stdcall LocalLock(HLOCAL hMem);
HLOCAL __stdcall LocalReAlloc(HLOCAL hMem, SIZE_T uBytes, UINT uFlags);
int __stdcall LocalSize(HLOCAL hMem);
int __stdcall LocalUnlock(HLOCAL hMem);
int __stdcall LocaleNameToLCID(LPCWSTR lpName,DWORD dwFlags);
int __stdcall LocateExtendedFeature(PCONTEXT_EX ContextEx,DWORD FeatureId,PDWORD Length);
int __stdcall LocateLegacyContext(PCONTEXT_EX ContextEx,PDWORD Length);
int __stdcall LockFile(HANDLE hFile,DWORD dwFileOffsetLow,DWORD dwFileOffsetHigh,DWORD nNumberOfBytesToLockLow,DWORD nNumberOfBytesToLockHigh);
int __stdcall LockFileEx(HANDLE hFile,DWORD dwFlags,DWORD dwReserved,DWORD nNumberOfBytesToLockLow,DWORD nNumberOfBytesToLockHigh,LPOVERLAPPED lpOverlapped);
int __stdcall LockResource(HGLOBAL hResInfo);
int __stdcall MapUserPhysicalPages(PVOID lpAddress,ULONG_PTR NumberOfPages,PULONG_PTR UserPfnArray);
int __stdcall MapUserPhysicalPagesScatter(PVOID* VirtualAddresses,ULONG_PTR NumberOfPages,PULONG_PTR PageArray);
int __stdcall MapViewOfFile(HANDLE hFileMappingObject,DWORD dwDesiredAccess,DWORD dwFileOffsetHigh,DWORD dwFileOffsetLow,SIZE_T dwNumberOfBytesToMap);
int __stdcall MapViewOfFileEx(HANDLE hFileMappingObject,DWORD dwDesiredAccess,DWORD dwFileOffsetHigh,DWORD dwFileOffsetLow,SIZE_T dwNumberOfBytesToMap,LPVOID lpBaseAddress);
int __stdcall MapViewOfFileExNuma(HANDLE hFileMappingObject,DWORD dwDesiredAccess,DWORD dwFileOffsetHigh,DWORD dwFileOffsetLow,SIZE_T dwNumberOfBytesToMap,LPVOID lpBaseAddress,DWORD nndPreferred);
int __stdcall Module32First(HANDLE hModuleSnap,LPMODULEENTRY32 lpme);
int __stdcall Module32FirstW(HANDLE hSnapshot,LPMODULEENTRY32 lpme);
int __stdcall Module32Next(HANDLE hModuleSnap,LPMODULEENTRY32 lpme);
int __stdcall Module32NextW(HANDLE hSnapshot,LPMODULEENTRY32 lpme);
int __stdcall MoveFile(LPCTSTR lpExistingFileName,LPCTSTR lpNewFileName);
int __stdcall MoveFileA(LPCTSTR lpExistingFileName,LPCTSTR lpNewFileName);
int __stdcall MoveFileEx(LPCTSTR lpExistingFileName,LPCTSTR lpNewFileName,DWORD dwFlags);
int __stdcall MoveFileTransacted(LPCTSTR lpExistingFileName,LPCTSTR lpNewFileName,LPPROGRESS_ROUTINE lpProgressRoutine,LPVOID lpData,DWORD dwFlags,HANDLE hTransaction);
int __stdcall MoveFileW(LPCTSTR lpExistingFileName,LPCTSTR lpNewFileName);
int __stdcall MoveFileWithProgress(LPCTSTR lpExistingFileName,LPCTSTR lpNewFileName,LPPROGRESS_ROUTINE lpProgressRoutine,LPVOID lpData,DWORD dwFlags);
int __stdcall MultiByteToWideChar(UINT CodePage,DWORD dwFlags,LPCSTR lpMultiByteStr,int cchMultiByte,LPWSTR lpwcBuffer,int nBuffer);
int __stdcall NeedCurrentDirectoryForExePath(LPCTSTR ExeName);
int __stdcall OpenEvent(DWORD dwDesiredAccess,BOOL bInheritHandle,LPCTSTR lpName);
int __stdcall OpenEventA(DWORD dwDesiredAccess,BOOL bInheritHandle,LPCTSTR lpName);
int __stdcall OpenEventW(DWORD dwDesiredAccess,BOOL bInheritHandle,LPCTSTR lpName);
int __stdcall OpenFile(LPCSTR lpFileName,LPOFSTRUCT lpReOpenBuff,DWORD uStyle);
int __stdcall OpenFileById(HANDLE hFile,LPFILE_ID_DESCRIPTOR lpFileID,DWORD dwDesiredAccess,DWORD dwShareMode,LPSECURITY_ATTRIBUTES lpSecurityAttributes,DWORD dwFlags);
int __stdcall OpenFileMapping(DWORD dwDesiredAccess,BOOL bInheritHandle,LPCTSTR lpName);
int __stdcall OpenFileMappingA(DWORD dwDesiredAccess,BOOL bInheritHandle,LPCTSTR lpName);
int __stdcall OpenFileMappingW(DWORD dwDesiredAccess,BOOL bInheritHandle,LPCTSTR lpName);
int __stdcall OpenJobObject(DWORD dwDesiredAccess,BOOL bInheritHandles,LPCTSTR lpName);
int __stdcall OpenMutex(DWORD dwDesiredAccess,BOOL bInheritHandle,LPCTSTR lpName);
int __stdcall OpenMutexA(DWORD dwDesiredAccess,BOOL bInheritHandle,LPCTSTR lpName);
int __stdcall OpenMutexW(DWORD dwDesiredAccess,BOOL bInheritHandle,LPCTSTR lpName);
int __stdcall OpenPrivateNamespace(LPVOID lpBoundaryDescriptor,LPCTSTR lpAliasPrefix);
int __stdcall OpenProcess(DWORD dwDesiredAccess,BOOL bInheritHandle,DWORD dwProcessId);
int __stdcall OpenSemaphore(DWORD dwDesiredAccess,BOOL bInheritHandle,LPCTSTR lpName);
int __stdcall OpenThread(DWORD dwDesiredAccess,BOOL bInheritHandle,DWORD dwThreadId);
int __stdcall OpenWaitableTimer(DWORD dwDesiredAccess,BOOL bInheritHandle,LPCTSTR lpTimerName);
int __stdcall OutputDebugString(LPCTSTR lpOutputString);
int __stdcall OutputDebugStringA(LPCTSTR lpOutputString);
int __stdcall OutputDebugStringW(LPCTSTR lpOutputString);
int __stdcall PeekConsoleInput(HANDLE hConsoleInput,PINPUT_RECORD lpBuffer,DWORD nLength,LPDWORD lpNumberOfEventsRead);
int __stdcall PostQueuedCompletionStatus(HANDLE CompletionPort,DWORD dwNumberOfBytesTransferred,ULONG_PTR dwCompletionKey,LPOVERLAPPED lpOverlapped);
int __stdcall PowerClearRequest(HANDLE PowerRequest,POWER_REQUEST_TYPE RequestType);
int __stdcall PowerCreateRequest(PREASON_CONTEXT Context);
int __stdcall PowerSetRequest(HANDLE PowerRequest,POWER_REQUEST_TYPE RequestType);
int __stdcall PrepareTape(HANDLE hDevice,DWORD dwOperation,BOOL bImmediate);
int __stdcall Process32First(HANDLE hSnapshot,LPPROCESSENTRY32 lppe);
int __stdcall Process32FirstW(HANDLE hSnapshot,LPPROCESSENTRY32 lppe);
int __stdcall Process32Next(HANDLE hSnapshot,LPPROCESSENTRY32 lppe);
int __stdcall Process32NextW(HANDLE hSnapshot,LPPROCESSENTRY32 lppe);
int __stdcall ProcessIdToSessionId(DWORD dwProcessId,DWORD* pSessionId);
int __stdcall PulseEvent(HANDLE hEvent);
int __stdcall PurgeComm(HANDLE hFile,DWORD dwFlags);
int __stdcall QueryActCtxSettingsW(DWORD dwFlags,HANDLE hActCtx,PCWSTR settingsNameSpace,PCWSTR settingName,PWSTR pvBuffer,SIZE_T dwBuffer,SIZE_T* pdwWrittenOrRequired);
int __stdcall QueryActCtxW(DWORD dwFlags,HANDLE hActCtx,PVOID pvSubInstance,UINT ulInfoClass,PVOID pvBuffer,SIZE_T cbBuffer,SIZE_T* pcbWrittenOrRequired);
int __stdcall QueryDepthSList(PSLIST_HEADER ListHead);
int __stdcall QueryFullProcessImageName(HANDLE hProcess,DWORD dwFlags,LPTSTR lpExeName,PDWORD lpdwSize);
int __stdcall QueryIdleProcessorCycleTime(PULONG BufferLength,PULONG64 ProcessorIdleCycleTime);
int __stdcall QueryIdleProcessorCycleTimeEx(USHORT Group,PULONG BufferLength,PULONG64 ProcessorIdleCycleTime);
int __stdcall QueryInformationJobObject(HANDLE hJob,JOBOBJECTINFOCLASS JobObjectInfoClass,LPVOID lpJobObjectInfo,DWORD cbJobObjectInfoLength,LPDWORD lpReturnLength);
int __stdcall QueryMemoryResourceNotification(HANDLE ResourceNotificationHandle,PBOOL ResourceState);
int __stdcall QueryPerformanceCounter(LARGE_INTEGER* lpPerformanceCount);
int __stdcall QueryPerformanceFrequency(LARGE_INTEGER* lpFrequency);
int __stdcall QueryProcessAffinityUpdateMode(HANDLE ProcessHandle,DWORD lpdwFlags);
int __stdcall QueryProcessCycleTime(HANDLE ProcessHandle,PULONG64 CycleTime);
int __stdcall QueryThreadCycleTime(HANDLE ThreadHandle,PULONG64 CycleTime);
int __stdcall QueryThreadpoolStackInformation(PTP_POOL ptpp,PTP_POOL_STACK_INFORMATION ptpsi);
int __stdcall QueryUmsThreadInformation(PUMS_CONTEXT UmsThread,UMS_THREAD_INFO_CLASS UmsThreadInfoClass,PVOID UmsThreadInformation,ULONG UmsThreadInformationLength,PULONG ReturnLength);
int __stdcall QueryUnbiasedInterruptTime(PULONGLONG UnbiasedTime);
int __stdcall QueryWorkingSet(HANDLE hProcess,PVOID pv,DWORD cb);
int __stdcall QueryWorkingSetEx(HANDLE hProcess,PVOID pv,DWORD cb);
int __stdcall QueueUserAPC(PAPCFUNC pfnAPC,HANDLE hThread,ULONG_PTR dwData);
int __stdcall QueueUserWorkItem(LPTHREAD_START_ROUTINE Function,PVOID Context,DWORD Flags);
int __stdcall RaiseException(DWORD dwExceptionCode,DWORD dwExceptionFlags,DWORD nNumberOfArguments,const ULONG_PTR* lpArguments);
int __stdcall RaiseFailFastException(PEXCEPTION_RECORD pExceptionRecord,PCONTEXT pContextRecord,DWORD dwFlags);
int __stdcall ReOpenFile(HANDLE hOriginalFile,DWORD dwDesiredAccess,DWORD dwShareMode,DWORD dwFlags);
int __stdcall ReadConsole(HANDLE hConsoleInput,LPVOID lpBuffer,DWORD nNumberOfCharsToRead,LPDWORD lpNumberOfCharsRead,LPVOID pInputControl);
int __stdcall ReadConsoleInput(HANDLE hConsoleInput,PINPUT_RECORD lpBuffer,DWORD nLength,LPDWORD lpNumberOfEventsRead);
int __stdcall ReadConsoleInputA(HANDLE hConsoleInput,PINPUT_RECORD lpInputRecord,DWORD nLength,LPDWORD lpNumberOfEventsRead);
int __stdcall ReadConsoleOutput(HANDLE hConsoleOutput,PCHAR_INFO lpBuffer,COORD dwBufferSize,COORD dwBufferCoord,PSMALL_RECT lpReadRegion);
int __stdcall ReadConsoleOutputAttribute(HANDLE hConsoleOutput,LPWORD lpAttribute,DWORD nLength,COORD dwReadCoord,LPDWORD lpNumberOfAttrsRead);
int __stdcall ReadConsoleOutputCharacter(HANDLE hConsoleOutput,LPTSTR lpCharacter,DWORD nLength,COORD dwReadCoord,LPDWORD lpNumberOfCharsRead);
int __stdcall ReadDirectoryChangesW(HANDLE hDirectory,LPVOID lpBuffer,DWORD nBufferLength,BOOL bWatchSubtree,DWORD dwNotifyFilter,LPDWORD lpBytesReturned,LPOVERLAPPED lpOverlapped,LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine);
bool __stdcall ReadFile(HANDLE hFile,LPVOID lpBuffer,DWORD nNumberOfBytesToRead,LPDWORD lpNumberOfBytesRead,LPOVERLAPPED lpOverlapped);
int __stdcall ReadFileEx(HANDLE hFile,LPVOID lpBuffer,DWORD nNumberOfBytesToRead,LPOVERLAPPED lpOverlapped,LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine);
int __stdcall ReadFileScatter(HANDLE hFile,FILE_SEGMENT_ELEMENT aSegmentArray,DWORD nNumberOfBytesToRead,LPDWORD lpReserved,LPOVERLAPPED lpOverlapped);
int __stdcall ReadProcessMemory(HANDLE hProcess,LPCVOID lpBaseAddress,LPVOID lpStockBuffer,SIZE_T nSize,SIZE_T* lpNumberOfBytesRead);
int __stdcall RegisterApplicationRecoveryCallback(APPLICATION_RECOVERY_CALLBACK pRecoveryCallback,PVOID pvParameter,DWORD dwPingInterval,DWORD dwFlags);
int __stdcall RegisterApplicationRestart(PCWSTR pwzCommandline,DWORD dwFlags);
int __stdcall RegisterWaitForSingleObject(PHANDLE phNewWaitObject,HANDLE hObject,WAITORTIMERCALLBACK Callback,PVOID Context,DWORD dwMilliseconds,DWORD dwFlags);
int __stdcall ReleaseActCtx(HANDLE hActCtx);
int __stdcall ReleaseMutex(HANDLE hMutex);
int __stdcall ReleaseMutexWhenCallbackReturns(PTP_CALLBACK_INSTANCE pci,HANDLE mut);
int __stdcall ReleaseSRWLockExclusive(PSRWLOCK SRWLock);
int __stdcall ReleaseSRWLockShared(PSRWLOCK SRWLock);
int __stdcall ReleaseSemaphore(HANDLE hSemaphore,LONG lReleaseCount,LPLONG lpPreviousCount);
int __stdcall ReleaseSemaphoreWhenCallbackReturns(PTP_CALLBACK_INSTANCE pci,HANDLE sem,DWORD crel);
int __stdcall RemoveDirectory(LPCTSTR lpPathName);
int __stdcall RemoveDirectoryA(LPCTSTR lpPathName);
int __stdcall RemoveDirectoryTransacted(LPCTSTR lpPathName,HANDLE hTransaction);
int __stdcall RemoveDirectoryW(LPCTSTR lpPathName);
int __stdcall RemoveSecureMemoryCacheCallback(PSECURE_MEMORY_CACHE_CALLBACK pfnCallBack);
int __stdcall RemoveVectoredContinueHandler(PVOID Handler);
int __stdcall RemoveVectoredExceptionHandler(PVOID Handler);
int __stdcall ReplaceFile(LPCTSTR lpReplacedFileName,LPCTSTR lpReplacementFileName,LPCTSTR lpBackupFileName,DWORD dwReplaceFlags,LPVOID lpExclude,LPVOID lpReserved);
int __stdcall RequestWakeupLatency(LATENCY_TIME latency);
int __stdcall ResetEvent(HANDLE hEvent);
int __stdcall ResetWriteWatch(LPVOID lpBaseAddress,SIZE_T dwRegionSize);
int __stdcall ResolveLocaleName(LPCWSTR lpNameToResolve,LPWSTR lpLocaleName,int cchLocaleName);
int __stdcall ResumeThread(HANDLE hThread);
int __stdcall RtlAddFunctionTable(PRUNTIME_FUNCTION FunctionTable,DWORD EntryCount,DWORD64 BaseAddress,ULONGLONG TargetGp);
int __stdcall RtlCaptureContext(PCONTEXT ContextRecord);
int __stdcall RtlCaptureStackBackTrace(ULONG FramesToSkip,ULONG FramesToCapture,PVOID* BackTrace,PULONG BackTraceHash);
int __stdcall RtlDeleteFunctionTable(PRUNTIME_FUNCTION FunctionTable);
int __stdcall RtlInstallFunctionTableCallback(DWORD64 TableIdentifier,DWORD64 BaseAddress,DWORD Length,PGET_RUNTIME_FUNCTION_CALLBACK Callback,PVOID Context,PCWSTR OutOfProcessCallbackDll);
int __stdcall RtlIsValidLocaleName(LPCWSTR LocaleName,ULONG Flags);
int __stdcall RtlLookupFunctionEntry(ULONGLONG ControlPC,PULONGLONG ImageBase,PULONGLONG TargetGp);
int __stdcall RtlPcToFileHeader(PVOID PcValue,PVOID* BaseOfImage);
int __stdcall RtlRestoreContext(PCONTEXT ContextRecord,PEXCEPTION_RECORD ExceptionRecord);
int __stdcall ScrollConsoleScreenBuffer(HANDLE hConsoleOutput,const SMALL_RECT* lpScrollRectangle,const SMALL_RECT* lpClipRectangle,COORD dwDestinationOrigin,const CHAR_INFO* lpFill);
int __stdcall ScrollConsoleScreenBufferA(HANDLE hConsoleOutput,const SMALL_RECT* lpScrollRectangle,const SMALL_RECT* lpClipRectangle,COORD dwDestinationOrigin,const CHAR_INFO* lpFill);
int __stdcall SearchPath(LPCTSTR lpPath,LPCTSTR lpFileName,LPCTSTR lpExtension,DWORD nBufferLength,LPTSTR lpBuffer,LPTSTR* lpFilePart);
int __stdcall SearchPathA(LPCTSTR lpPath,LPCTSTR lpFileName,LPCTSTR lpExtension,DWORD nBufferSize,LPTSTR lpStockBuffer,LPTSTR* lpFilePart);
int __stdcall SearchPathW(LPCTSTR lpPath,LPCTSTR lpFileName,LPCTSTR lpExtension,DWORD nBufferSize,LPTSTR lpStockBuffer,LPTSTR* lpFilePart);
int __stdcall SetCalendarInfo(LCID Locale,CALID Calendar,CALTYPE CalType,LPCTSTR lpCalData);
int __stdcall SetCommBreak(HANDLE hFile);
int __stdcall SetCommConfig(HANDLE hCommDev,LPCOMMCONFIG lpCC,DWORD dwSize);
int __stdcall SetCommMask(HANDLE hFile,DWORD dwEvtMask);
int __stdcall SetCommState(HANDLE hFile,LPDCB lpDCB);
int __stdcall SetCommTimeouts(HANDLE hFile,LPCOMMTIMEOUTS lpCommTimeouts);
int __stdcall SetComputerName(LPCTSTR lpComputerName);
int __stdcall SetComputerNameA(LPCTSTR lpComputerName);
int __stdcall SetComputerNameEx(COMPUTER_NAME_FORMAT NameType,LPCTSTR lpBuffer);
int __stdcall SetComputerNameW(LPCTSTR lpComputerName);
int __stdcall SetConsoleActiveScreenBuffer(HANDLE hConsoleOutput);
int __stdcall SetConsoleCP(UINT wCodePageID);
int __stdcall SetConsoleCtrlHandler(PHANDLER_ROUTINE hRoutine,BOOL Add);
int __stdcall SetConsoleCursorInfo(HANDLE hConsoleOutput,const CONSOLE_CURSOR_INFO* lpConsoleCursorInfo);
int __stdcall SetConsoleCursorPosition(HANDLE hConsoleOutput,COORD dwCursorPosition);
int __stdcall SetConsoleDisplayMode(HANDLE hConsoleOutput,DWORD dwFlags,PCOORD lpNewScreenBufferDimensions);
int __stdcall SetConsoleHistoryInfo(PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo);
int __stdcall SetConsoleMode(HANDLE hConsoleHandle,DWORD dwMode);
int __stdcall SetConsoleOutputCP(UINT wCodePageID);
int __stdcall SetConsoleScreenBufferInfoEx(HANDLE hConsoleOutput,PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx);
int __stdcall SetConsoleScreenBufferSize(HANDLE hConsoleOutput,COORD dwSize);
int __stdcall SetConsoleTextAttribute(HANDLE hConsoleOutput,WORD wAttributes);
int __stdcall SetConsoleTitle(LPCTSTR lpConsoleTitle);
int __stdcall SetConsoleTitleA(LPCTSTR pConsoleTitle);
int __stdcall SetConsoleTitleW(LPCTSTR pConsoleTitle);
int __stdcall SetConsoleWindowInfo(HANDLE hConsoleOutput,BOOL bAbsolute,const SMALL_RECT* lpConsoleWindow);
int __stdcall SetCriticalSectionSpinCount(LPCRITICAL_SECTION lpCriticalSection,DWORD dwSpinCount);
int __stdcall SetCurrentConsoleFontEx(HANDLE hConsoleOutput,BOOL bMaximumWindow,PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx);
int __stdcall SetCurrentDirectory(LPCTSTR lpPathName);
int __stdcall SetCurrentDirectoryA(LPCTSTR lpPathName);
int __stdcall SetCurrentDirectoryW(LPCTSTR lpPathName);
int __stdcall SetDefaultCommConfig(LPCTSTR lpszName,LPCOMMCONFIG lpCC,DWORD dwSize);
int __stdcall SetDllDirectory(LPCTSTR lpPathName);
int __stdcall SetDynamicTimeZoneInformation(const DYNAMIC_TIME_ZONE_INFORMATION* lpTimeZoneInformation);
int __stdcall SetEndOfFile(HANDLE hFile);
int __stdcall SetEnvironmentVariable(LPCTSTR lpName,LPCTSTR lpValue);
int __stdcall SetEnvironmentVariableA(LPCTSTR lpName,LPCTSTR lpValue);
int __stdcall SetEnvironmentVariableW(LPCTSTR lpName,LPCTSTR lpValue);
int __stdcall SetErrorMode(DWORD uMode);
int __stdcall SetEvent(HANDLE hEvent);
int __stdcall SetEventWhenCallbackReturns(PTP_CALLBACK_INSTANCE pci,HANDLE evt);
int __stdcall SetExtendedFeaturesMask(PCONTEXT_EX ContextEx,DWORD64 FeatureMask);
int __stdcall SetFileApisToANSI();
int __stdcall SetFileApisToOEM();
int __stdcall SetFileAttributes(LPCTSTR lpFileName,DWORD dwFileAttributes);
int __stdcall SetFileAttributesA(LPCTSTR lpFileName,DWORD dwFileAttributes);
int __stdcall SetFileAttributesTransacted(LPCTSTR lpFileName,DWORD dwFileAttributes,HANDLE hTransaction);
int __stdcall SetFileAttributesW(LPCTSTR lpFileName,DWORD dwFileAttributes);
int __stdcall SetFileBandwidthReservation(HANDLE hFile,DWORD nPeriodMilliseconds,DWORD nBytesPerPeriod,BOOL bDiscardable,LPDWORD lpTransferSize,LPDWORD lpNumOutstandingRequests);
int __stdcall SetFileCompletionNotificationModes(HANDLE FileHandle,UCHAR Flags);
int __stdcall SetFileInformationByHandle(HANDLE hFile,FILE_INFO_BY_HANDLE_CLASS FileInformationClass,LPVOID lpFileInformation,DWORD dwBufferSize);
int __stdcall SetFileIoOverlappedRange(HANDLE FileHandle,PUCHAR OverlappedRangeStart,ULONG Length);
int __stdcall SetFilePointer(HANDLE hFile,LONG lDistanceToMove,PLONG lpDistanceToMoveHigh,DWORD dwMoveMethod);
int __stdcall SetFilePointerEx(HANDLE hFile,LARGE_INTEGER lDistanceToMove,PLARGE_INTEGER pliNewFilePointer,DWORD dwMoveMethod);
int __stdcall SetFileShortName(HANDLE hFile,LPCTSTR lpShortName);
int __stdcall SetFileTime(HANDLE hFile,const FILETIME* lpCreationTime,const FILETIME* lpLastAccessTime,const FILETIME* lpLastWriteTime);
int __stdcall SetFileValidData(HANDLE hFile,LONGLONG ValidDataLength);
int __stdcall SetFirmwareEnvironmentVariable(LPCTSTR lpName,LPCTSTR lpGuid,PVOID pBuffer,DWORD nSize);
int __stdcall SetHandleInformation(HANDLE hObject,DWORD dwMask,DWORD dwFlags);
int __stdcall SetInformationJobObject(HANDLE hJob,JOBOBJECTINFOCLASS JobObjectInfoClass,LPVOID lpJobObjectInfo,DWORD cbJobObjectInfoLength);
int __stdcall SetLastError(DWORD dwErrCode);
int __stdcall SetLocalTime(const SYSTEMTIME* lpSystemTime);
int __stdcall SetLocaleInfo(LCID Locale,LCTYPE LCType,LPCTSTR lpLCData);
int __stdcall SetLocaleInfoA(LCID Locale,LCTYPE LCType,LPCTSTR lpLCData);
int __stdcall SetLocaleInfoW(LCID Locale,LCTYPE LCType,LPCTSTR lpLCData);
int __stdcall SetMailslotInfo(HANDLE hMailslot,DWORD lReadTimeout);
int __stdcall SetPriorityClass(HANDLE hProcess,DWORD dwPriorityClass);
int __stdcall SetProcessAffinityMask(HANDLE hProcess,DWORD_PTR dwProcessAffinityMask);
int __stdcall SetProcessAffinityUpdateMode(HANDLE ProcessHandle,DWORD dwFlags);
int __stdcall SetProcessDEPPolicy(DWORD dwFlags);
int __stdcall SetProcessPriorityBoost(HANDLE hProcess,BOOL DisablePriorityBoost);
int __stdcall SetProcessShutdownParameters(DWORD dwLevel,DWORD dwFlags);
int __stdcall SetProcessWorkingSetSize(HANDLE hProcess,SIZE_T dwMinimumWorkingSetSize,SIZE_T dwMaximumWorkingSetSize);
int __stdcall SetProcessWorkingSetSizeEx(HANDLE hProcess,SIZE_T dwMinimumWorkingSetSize,SIZE_T dwMaximumWorkingSetSize,DWORD Flags);
int __stdcall SetSearchPathMode(DWORD Flags);
int __stdcall SetStdHandle(DWORD nStdHandle,HANDLE hHandle);
int __stdcall SetSystemFileCacheSize(SIZE_T MinimumFileCacheSize,SIZE_T MaximumFileCacheSize,DWORD Flags);
int __stdcall SetSystemPowerState(BOOL fSuspend,BOOL fForce);
int __stdcall SetSystemTime(const SYSTEMTIME* lpSystemTime);
int __stdcall SetSystemTimeAdjustment(DWORD dwTimeAdjustment,BOOL bTimeAdjustmentDisabled);
int __stdcall SetTapeParameters(HANDLE hDevice,DWORD dwOperation,LPVOID lpTapeInformation);
int __stdcall SetTapePosition(HANDLE hDevice,DWORD dwPositionMethod,DWORD dwPartition,DWORD dwOffsetLow,DWORD dwOffsetHigh,BOOL bImmediate);
int __stdcall SetThreadAffinityMask(HANDLE hThread,DWORD_PTR dwThreadAffinityMask);
int __stdcall SetThreadContext(HANDLE hThread,const CONTEXT* lpContext);
int __stdcall SetThreadErrorMode(DWORD dwNewMode,LPDWORD lpOldMode);
int __stdcall SetThreadExecutionState(EXECUTION_STATE esFlags);
int __stdcall SetThreadGroupAffinity(HANDLE hThread,const GROUP_AFFINITY* GroupAffinity);
int __stdcall SetThreadIdealProcessor(HANDLE hThread,DWORD dwIdealProcessor);
int __stdcall SetThreadIdealProcessorEx(HANDLE hThread,PPROCESSOR_NUMBER lpIdealProcessor,PPROCESSOR_NUMBER lpPreviousIdealProcessor);
int __stdcall SetThreadLocale(LCID Locale);
int __stdcall SetThreadPriority(HANDLE hThread,DWORD nPriority);
int __stdcall SetThreadPriorityBoost(HANDLE hThread,BOOL DisablePriorityBoost);
int __stdcall SetThreadStackGuarantee(PULONG StackSizeInBytes);
int __stdcall SetThreadpoolCallbackPriority(PTP_CALLBACK_ENVIRON pcbe,TP_CALLBACK_PRIORITY Priority);
int __stdcall SetThreadpoolStackInformation(PTP_POOL ptpp,PTP_POOL_STACK_INFORMATION ptpsi);
int __stdcall SetThreadpoolThreadMaximum(PTP_POOL ptpp,DWORD cthrdMost);
int __stdcall SetThreadpoolThreadMinimum(PTP_POOL ptpp,DWORD cthrdMic);
int __stdcall SetThreadpoolTimer(PTP_TIMER pti,PFILETIME pftDueTime,DWORD msPeriod,DWORD msWindowLength);
int __stdcall SetThreadpoolWait(PTP_WAIT pwa,HANDLE h,PFILETIME pftTimeout);
int __stdcall SetTimeZoneInformation(const TIME_ZONE_INFORMATION* lpTimeZoneInformation);
int __stdcall SetUmsThreadInformation(PUMS_CONTEXT UmsThread,UMS_THREAD_INFO_CLASS UmsThreadInfoClass,PVOID UmsThreadInformation,ULONG UmsThreadInformationLength);
int __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter);
int __stdcall SetUserGeoID(GEOID GeoId);
int __stdcall SetWaitableTimer(HANDLE hTimer,const LARGE_INTEGER* pDueTime,LONG lPeriod,PTIMERAPCROUTINE pfnCompletionRoutine,LPVOID lpArgToCompletionRoutine,BOOL fResume);
int __stdcall SetWaitableTimerEx(HANDLE hTimer,const LARGE_INTEGER* lpDueTime,LONG lPeriod,PTIMERAPCROUTINE pfnCompletionRoutine,LPVOID lpArgToCompletionRoutine,PREASON_CONTEXT WakeContext,ULONG TolerableDelay);
int __stdcall SetupComm(HANDLE hFile,DWORD dwInQueue,DWORD dwOutQueue);
int __stdcall SignalObjectAndWait(HANDLE hObjectToSignal,HANDLE hObjectToWaitOn,DWORD dwMilliseconds,BOOL bAlertable);
int __stdcall SizeofResource(HMODULE hModule,HRSRC hResInfo);
void __stdcall Sleep(DWORD dwMilliseconds);
int __stdcall SleepConditionVariableCS(PCONDITION_VARIABLE ConditionVariable,PCRITICAL_SECTION CriticalSection,DWORD dwMilliseconds);
int __stdcall SleepConditionVariableSRW(PCONDITION_VARIABLE ConditionVariable,PSRWLOCK SRWLock,DWORD dwMilliseconds,ULONG Flags);
int __stdcall SleepEx(DWORD dwMilliseconds,BOOL bAlertable);
int __stdcall StartThreadpoolIo(PTP_IO pio);
int __stdcall SubmitThreadpoolWork(PTP_WORK pwk);
int __stdcall SuspendThread(HANDLE hThread);
int __stdcall SwitchToFiber(LPVOID lpFiber);
int __stdcall SwitchToThread();
int __stdcall SystemTimeToFileTime(const SYSTEMTIME* lpSystemTime,LPFILETIME lpFileTime);
int __stdcall SystemTimeToTzSpecificLocalTime(LPTIME_ZONE_INFORMATION lpTimeZoneInformation,LPSYSTEMTIME lpUniversalTime,LPSYSTEMTIME lpLocalTime);
int __stdcall TerminateJobObject(HANDLE hJob,UINT uExitCode);
int __stdcall TerminateProcess(HANDLE hProcess,UINT uExitCode);
int __stdcall TerminateThread(HANDLE hProcess,DWORD uExitCode);
int __stdcall Thread32First(HANDLE hSnapshot,LPTHREADENTRY32 lpte);
int __stdcall Thread32Next(HANDLE hSnapshot,LPTHREADENTRY32 lpte);
int __stdcall TlsAlloc();
int __stdcall TlsFree(DWORD dwTlsIndex );
int __stdcall TlsGetValue(DWORD dwTlsIndex);
int __stdcall TlsSetValue(DWORD dwTlsIndex,LPVOID pTlsValue);
int __stdcall Toolhelp32ReadProcessMemory(DWORD th32ProcessID,LPCVOID lpBaseAddress,LPVOID lpBuffer,SIZE_T cbRead,SIZE_T lpNumberOfBytesRead);
int __stdcall TransmitCommChar(HANDLE hFile,char cChar);
int __stdcall TryAcquireSRWLockExclusive(PSRWLOCK SRWLock);
int __stdcall TryAcquireSRWLockShared(PSRWLOCK SRWLock);
int __stdcall TryEnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection);
int __stdcall TrySubmitThreadpoolCallback(PTP_SIMPLE_CALLBACK pfns,PVOID pv,PTP_CALLBACK_ENVIRON pcbe);
int __stdcall TzSpecificLocalTimeToSystemTime(LPTIME_ZONE_INFORMATION lpTimeZoneInformation,LPSYSTEMTIME lpLocalTime,LPSYSTEMTIME lpUniversalTime);
int __stdcall UmsThreadYield(PVOID SchedulerParam);
int __stdcall UnhandledExceptionFilter(struct _EXCEPTION_POINTERS* pExceptionInfo);
int __stdcall UnlockFile(HANDLE hFile,DWORD dwFileOffsetLow,DWORD dwFileOffsetHigh,DWORD nNumberOfBytesToUnlockLow,DWORD nNumberOfBytesToUnlockHigh);
int __stdcall UnlockFileEx(HANDLE hFile,DWORD dwReserved,DWORD nNumberOfBytesToUnlockLow,DWORD nNumberOfBytesToUnlockHigh,LPOVERLAPPED lpOverlapped);
int __stdcall UnmapViewOfFile(LPCVOID lpBaseAddress);
int __stdcall UnregisterApplicationRecoveryCallback();
int __stdcall UnregisterApplicationRestart();
int __stdcall UnregisterWait(HANDLE WaitHandle);
int __stdcall UnregisterWaitEx(HANDLE WaitHandle,HANDLE CompletionEvent);
int __stdcall UpdateCalendarDayOfWeek(LPCALDATETIME lpCalDateTime);
int __stdcall UpdateProcThreadAttribute(LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,DWORD dwFlags,DWORD Attribute,PVOID lpValue,SIZE_T cbSize,PVOID lpPreviousValue,PSIZE_T lpReturnSize);
int __stdcall UpdateResource(HANDLE hUpdate,LPCTSTR lpType,LPCTSTR lpName,WORD wLanguage,LPVOID lpData,DWORD cbData);
int __stdcall VerLanguageName(DWORD wLang,LPTSTR szLang,DWORD cchLang);
int __stdcall VerLanguageNameA(DWORD wLang,LPTSTR szLang,DWORD nSize);
int __stdcall VerLanguageNameW(DWORD wLang,LPTSTR szLang,DWORD nSize);
int __stdcall VerSetConditionMask(ULONGLONG dwlConditionMask,DWORD dwTypeBitMask,DWORD dwConditionMask);
int __stdcall VerifyScripts(DWORD dwFlags,LPCWSTR lpLocaleScripts,int cchLocaleScripts,LPCWSTR lpTestScripts,int cchTestScripts);
int __stdcall VerifyVersionInfo(LPOSVERSIONINFOEX lpVersionInfo,DWORD dwTypeMask,DWORDLONG dwlConditionMask);
int __stdcall VirtualAlloc(LPVOID lpAddress,SIZE_T dwSize,DWORD flAllocationType,DWORD flProtect);
int __stdcall VirtualAllocEx(HANDLE hProcess,LPVOID lpAddress,SIZE_T dwSize,DWORD flAllocationType,DWORD flProtect);
int __stdcall VirtualAllocExNuma(HANDLE hProcess,LPVOID lpAddress,SIZE_T dwSize,DWORD flAllocationType,DWORD flProtect,DWORD nndPreferred);
int __stdcall VirtualFree(LPVOID lpAddress,SIZE_T dwSize,DWORD FreeType);
int __stdcall VirtualFreeEx(HANDLE hProces,LPVOID lpAddress,SIZE_T dwSize,DWORD dwFreeType);
int __stdcall VirtualLock(LPVOID lpAddress,SIZE_T dwSize);
int __stdcall VirtualProtect(LPVOID lpAddress,SIZE_T dwSize,DWORD flNewProtect,DWORD lpflOldProtect);
int __stdcall VirtualProtectEx(HANDLE hProces,LPVOID lpAddress,SIZE_T dwSize,DWORD flNewProtect,DWORD lpflOldProtect);
int __stdcall VirtualQuery(LPCVOID lpAddress,PMEMORY_BASIC_INFORMATION pbi_Buffer,SIZE_T dwLength);
int __stdcall VirtualQueryEx(HANDLE hProcess,LPCVOID lpAddress,PMEMORY_BASIC_INFORMATION pbi_Buffer,SIZE_T dwLength);
int __stdcall VirtualUnlock(LPVOID lpAddress,SIZE_T dwSize);
int __stdcall WTSGetActiveConsoleSessionId();
int __stdcall WaitCommEvent(HANDLE hFile,LPDWORD lpEvtMask,LPOVERLAPPED lpOverlapped);
int __stdcall WaitForDebugEvent(LPDEBUG_EVENT lpDebugEvent,DWORD dwMilliseconds);
int __stdcall WaitForMultipleObjects(DWORD nCount,const HANDLE* lpHandles,BOOL bWaitAll,DWORD dwMilliseconds);
int __stdcall WaitForMultipleObjectsEx(DWORD nCount,const HANDLE* lpHandles,BOOL bWaitAll,DWORD dwMilliseconds,BOOL bAlertable);
int __stdcall WaitForSingleObject(HANDLE hHandle,DWORD dwMilliseconds);
int __stdcall WaitForSingleObjectEx(HANDLE hHandle,DWORD dwMilliseconds,BOOL bAlertable);
int __stdcall WaitForThreadpoolIoCallbacks(PTP_IO pio,BOOL fCancelPendingCallbacks);
int __stdcall WaitForThreadpoolTimerCallbacks(PTP_TIMER pti,BOOL fCancelPendingCallbacks);
int __stdcall WaitForThreadpoolWaitCallbacks(PTP_WAIT pwa,BOOL fCancelPendingCallbacks);
int __stdcall WaitForThreadpoolWorkCallbacks(PTP_WORK pwk,BOOL fCancelPendingCallbacks);
int __stdcall WakeAllConditionVariable(PCONDITION_VARIABLE ConditionVariable);
int __stdcall WakeConditionVariable(PCONDITION_VARIABLE ConditionVariable);
int __stdcall WerGetFlags(HANDLE hProcess,PDWORD pdwFlags);
int __stdcall WerRegisterFile(PCWSTR pwzFile,WER_REGISTER_FILE_TYPE regFileType,DWORD dwFlags);
int __stdcall WerRegisterMemoryBlock(PVOID pvAddress,DWORD dwSize);
int __stdcall WerRegisterRuntimeExceptionModule(PCWSTR pwszOutOfProcessCallbackDll,PVOID pContext);
int __stdcall WerSetFlags(DWORD dwFlags);
int __stdcall WerUnregisterFile(PCWSTR pwzFilePath);
int __stdcall WerUnregisterMemoryBlock(PVOID pvAddress);
int __stdcall WerUnregisterRuntimeExceptionModule(PCWSTR pwszOutOfProcessCallbackDll,PVOID pContext);
int __stdcall WideCharToMultiByte(UINT CodePage,DWORD Options,LPCWSTR WideCharStr,int WideCharCount,LPSTR lpszBuffer,int MultiByteByte,LPCSTR pDefaultChar,LPBOOL pDefaultCharUsed);
int __stdcall WinExec(LPCSTR lpCmdLine,UINT uCmdShow);
int __stdcall Wow64DisableWow64FsRedirection(PVOID* OldValue);
int __stdcall Wow64EnableWow64FsRedirection(BOOLEAN Wow64FsEnableRedirection);
int __stdcall Wow64GetThreadContext(HANDLE hThread,PWOW64_CONTEXT lpContext);
int __stdcall Wow64GetThreadSelectorEntry(HANDLE hThread,DWORD dwSelector,PWOW64_LDT_ENTRY lpSelectorEntry);
int __stdcall Wow64RevertWow64FsRedirection(PVOID OldValue);
int __stdcall Wow64SetThreadContext(HANDLE hThread,CONST WOW64_CONTEXT* lpContext);
int __stdcall Wow64SuspendThread(HANDLE hThread);
int __stdcall WriteConsole(HANDLE hConsoleOutput,LPCTSTR lpBuffer,DWORD nNumberOfCharsToWrite,LPDWORD lpNumberOfCharsWritten,LPVOID lpReserved);
int __stdcall WriteConsoleInput(HANDLE hConsoleInput,const INPUT_RECORD* lpBuffer,DWORD nLength,LPDWORD lpNumberOfEventsWritten);
int __stdcall WriteConsoleOutput(HANDLE hConsoleOutput,const CHAR_INFO* lpBuffer,COORD dwBufferSize,COORD dwBufferCoord,PSMALL_RECT lpWriteRegion);
int __stdcall WriteConsoleOutputA(HANDLE hConsoleOutput,const CHAR_INFO* lpBuffer,COORD dwBufferSize,COORD dwBufferCoord,PSMALL_RECT lpWriteRegion);
int __stdcall WriteConsoleOutputAttribute(HANDLE hConsoleOutput,const WORD* lpAttribute,DWORD nLength,COORD dwWriteCoord,LPDWORD lpNumberOfAttrsWritten);
int __stdcall WriteConsoleOutputCharacter(HANDLE hConsoleOutput,LPCTSTR lpCharacter,DWORD nLength,COORD dwWriteCoord,LPDWORD lpNumberOfCharsWritten);
BOOL __stdcall WriteFile(HANDLE hFile,LPCVOID lpWriteData,DWORD nNumberOfBytesToWrite,LPDWORD lpNumberOfBytesWritten,LPOVERLAPPED lpOverlapped);
int __stdcall WriteFileEx(HANDLE hFile,LPCVOID lpWriteData,DWORD nNumberOfBytesToWrite,LPOVERLAPPED lpOverlapped,LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine);
int __stdcall WriteFileGather(HANDLE hFile,FILE_SEGMENT_ELEMENT lpBuffer,DWORD nNumberOfBytesToWrite,LPDWORD pOverlapped,LPOVERLAPPED lpCompletionRoutine);
int __stdcall WriteFileW(HANDLE hFile,LPCVOID lpWriteData,DWORD nNumberOfBytesToWrite,LPDWORD lpNumberOfBytesWritten,LPOVERLAPPED lpOverlapped);
int __stdcall WritePrivateProfileSection(LPCTSTR lpAppName,LPCTSTR lpString,LPCTSTR lpFileName);
int __stdcall WritePrivateProfileSectionA(LPCTSTR lpAppName,LPCTSTR lpString,LPCTSTR lpFileName);
int __stdcall WritePrivateProfileSectionW(LPCTSTR lpAppName,LPCTSTR lpString,LPCTSTR lpFileName);
int __stdcall WritePrivateProfileString(LPCTSTR lpAppName,LPCTSTR lpKeyName,LPCTSTR lpString,LPCTSTR lpFileName);
int __stdcall WritePrivateProfileStringA(LPCTSTR lpAppName,LPCTSTR lpKeyName,LPCTSTR lpString,LPCTSTR pFileName);
int __stdcall WritePrivateProfileStringW(LPCTSTR lpAppName,LPCTSTR lpKeyName,LPCTSTR lpString,LPCTSTR pFileName);
int __stdcall WritePrivateProfileStruct(LPCTSTR lpszSection,LPCTSTR lpszKey,LPVOID lpStruct,UINT uSizeStruct,LPCTSTR szFile);
int __stdcall WritePrivateProfileStructA(LPCTSTR lpszSection,LPCTSTR lpszKey,LPVOID lpStruct,UINT uSizeStruct,LPCTSTR szFile);
int __stdcall WritePrivateProfileStructW(LPCTSTR lpszSection,LPCTSTR lpszKey,LPVOID lpStruct,UINT uSizeStruct,LPCTSTR szFile);
int __stdcall WriteProcessMemory(HANDLE hProcess,LPVOID lpBaseAddress,LPCVOID lpStockBuffer,SIZE_T nBufferSize,SIZE_T* lpNumberOfBytesWritten);
int __stdcall WriteProfileSection(LPCTSTR lpAppName,LPCTSTR lpString);
int __stdcall WriteProfileSectionA(LPCTSTR lpAppName,LPCTSTR lpString);
int __stdcall WriteProfileSectionW(LPCTSTR lpAppName,LPCTSTR lpString);
int __stdcall WriteProfileString(LPCTSTR lpAppName,LPCTSTR lpKeyName,LPCTSTR lpString);
int __stdcall WriteProfileStringA(LPCTSTR lpszSection,LPCTSTR lpszKeyName,LPCTSTR lpszString);
int __stdcall WriteProfileStringW(LPCTSTR lpszSection,LPCTSTR lpszKeyName,LPCTSTR lpszString);
int __stdcall WriteTapemark(HANDLE hDevice,DWORD dwTapemarkType,DWORD dwTapemarkCount,BOOL bImmediate);
int __stdcall ZombifyActCtx(HANDLE hActCtx);
int __stdcall _hread(HFILE hFile,DWORD lpBuffer,DWORD nBufferSize);
int __stdcall _hwrite(HFILE hFile,DWORD lpBuffer,DWORD nBufferSize);
int __stdcall _lclose(HFILE hFile);
int __stdcall _lcreat(LPCSTR lpPathName,DWORD iAttribute);
int __stdcall _llseek(HFILE hFile,LONG lOffset,int iOrigin);
int __stdcall _lopen(LPCSTR lpPathName,int iReadWrite);
int __stdcall _lread(HFILE hFile,LPVOID lpBuffer,UINT nBufferSize);
int __stdcall _lwrite(HFILE hFile,LPVOID lpBuffer,UINT nBufferSize);
int __stdcall lstrcat(LPTSTR String1,LPTSTR String2);
int __stdcall lstrcatW(LPTSTR String1,LPTSTR String2);
int __stdcall lstrcmp(LPCTSTR string1,LPCTSTR string2);
int __stdcall lstrcmpW(LPCTSTR string1,LPCTSTR string2);
int __stdcall lstrcmpi(LPCTSTR string1,LPCTSTR string2);
int __stdcall lstrcmpiW(LPCTSTR lpString1,LPCTSTR lpString2);
int __stdcall lstrcpy(LPTSTR lpString1,LPTSTR lpString2);
int __stdcall lstrcpyW(LPTSTR lpString1,LPTSTR lpString2);
int __stdcall lstrcpyn(LPTSTR lpBuffer,LPCTSTR lpstrSrc,int nBuffer);
int __stdcall lstrcpynW(LPTSTR lpBuffer,LPCTSTR lpstrSrc,int nBuffer);
int __stdcall lstrlen(LPCTSTR lpString);
int __stdcall lstrlenA(LPCTSTR lpString);
int __stdcall lstrlenW(LPCTSTR lpString);
int __stdcall RtlUnwind(PEXCEPTION_REGISTRATION pRegistrationFrame,PVOID returnAddr,PEXCEPTION_RECORD pExcptRec,DWORD _eax_value);
bool __stdcall CreatePipe(PHANDLE hReadPipe,PHANDLE hWritePipe,LPSECURITY_ATTRIBUTES lpPipeAttributes,DWORD nSize);
long __stdcall SetHandleCount(long wNumber);