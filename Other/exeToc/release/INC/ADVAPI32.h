int __stdcall AbortSystemShutdown(LPTSTR lpMachineName);
int __stdcall AccessCheck(PSECURITY_DESCRIPTOR pSecurityDescriptor,HANDLE ClientToken,DWORD DesiredAccess,PGENERIC_MAPPING GenericMapping,PPRIVILEGE_SET PrivilegeSet,LPDWORD PrivilegeSetLength,LPDWORD GrantedAccess,LPBOOL AccessStatus);
int __stdcall AccessCheckAndAuditAlarm(LPCTSTR SubsystemName,LPVOID HandleId,LPTSTR ObjectTypeName,LPTSTR ObjectName,PSECURITY_DESCRIPTOR SecurityDescriptor,DWORD DesiredAccess,PGENERIC_MAPPING GenericMapping,BOOL ObjectCreation,LPDWORD GrantedAccess,LPBOOL AccessStatus,LPBOOL pfGenerateOnClose);
int __stdcall AccessCheckByType(PSECURITY_DESCRIPTOR pSecurityDescriptor,PSID PrincipalSelfSid,HANDLE ClientToken,DWORD DesiredAccess,POBJECT_TYPE_LIST ObjectTypeList,DWORD ObjectTypeListLength,PGENERIC_MAPPING GenericMapping,PPRIVILEGE_SET PrivilegeSet,LPDWORD PrivilegeSetLength,LPDWORD GrantedAccess,LPBOOL AccessStatus);
int __stdcall AddAccessAllowedAce(PACL pAcl,DWORD nAclLength,DWORD dwAclRevision);
int __stdcall AddAccessAllowedAceEx(PACL pAcl,DWORD dwAceRevision,DWORD AceFlags,DWORD AccessMask,PSID pSid);
int __stdcall AddAccessAllowedObjectAce(PACL pAcl,DWORD dwAceRevision,DWORD AceFlags,DWORD AccessMask,GUID* ObjectTypeGuid,GUID* InheritedObjectTypeGuid,PSID pSid);
int __stdcall AddAccessDeniedAce(PACL pAcl,DWORD dwAceRevision,DWORD AccessMask,PSID pSid);
int __stdcall AddAccessDeniedAceEx(PACL pAcl,DWORD dwAceRevision,DWORD AceFlags,DWORD AccessMask,PSID pSid);
int __stdcall AddAccessDeniedObjectAce(PACL pAcl,DWORD dwAceRevision,DWORD AceFlags,DWORD AccessMask,GUID* ObjectTypeGuid,GUID* InheritedObjectTypeGuid,PSID pSid);
int __stdcall AddAce(PACL pAcl,DWORD dwAceRevision,DWORD dwStartingAceIndex,LPVOID pAceList,DWORD nAceListLength);
int __stdcall AddAuditAccessAce(PACL pAcl,DWORD dwAceRevision,DWORD dwAccessMask,PSID pSid,BOOL bAuditSuccess,BOOL bAuditFailure);
int __stdcall AddAuditAccessAceEx(PACL pAcl,DWORD dwAceRevision,DWORD AceFlags,DWORD dwAccessMask,PSID pSid,BOOL bAuditSuccess,BOOL bAuditFailure);
int __stdcall AddAuditAccessObjectAce(PACL pAcl,DWORD dwAceRevision,DWORD AceFlags,DWORD AccessMask,GUID* ObjectTypeGuid,GUID* InheritedObjectTypeGuid,PSID pSid,BOOL bAuditSuccess,BOOL bAuditFailure);
int __stdcall AddConditionalAce(PACL pAcl,DWORD dwAceRevision,DWORD AceFlags,UCHAR AceType,DWORD AccessMask,PSID pSid,PWCHAR ConditionStr,DWORD* ReturnLength);
int __stdcall AddMandatoryAce(PACL pAcl,DWORD dwAceRevision,DWORD AceFlags,DWORD MandatoryPolicy,PSID pLabelSid);
int __stdcall AddUsersToEncryptedFile(LPCWSTR lpFileName,PENCRYPTION_CERTIFICATE_LIST pUsers);
int __stdcall AdjustTokenGroups(HANDLE TokenHandle,BOOL ResetToDefault,PTOKEN_GROUPS NewState,DWORD BufferLength,PTOKEN_GROUPS PreviousState,PDWORD ReturnLength);
int __stdcall AdjustTokenPrivileges(HANDLE TokenHandle,BOOL DisableAllPrivileges,PTOKEN_PRIVILEGES NewState,DWORD BufferLength,PTOKEN_PRIVILEGES PreviousState,PDWORD ReturnLength);
int __stdcall AllocateLocallyUniqueId(PLUID Luid);
int __stdcall AreAllAccessesGranted(DWORD GrantedAccess,DWORD DesiredAccess);
int __stdcall AreAnyAccessesGranted(DWORD GrantedAccess,DWORD DesiredAccess);
int __stdcall AuditComputeEffectivePolicyBySid(const PSID pSid,const GUID* pSubCategoryGuids,ULONG PolicyCount,PAUDIT_POLICY_INFORMATION* ppAuditPolicy);
int __stdcall AuditComputeEffectivePolicyByToken(HANDLE hTokenHandle,const GUID* pSubCategoryGuids,ULONG PolicyCount,PAUDIT_POLICY_INFORMATION* ppAuditPolicy);
int __stdcall AuditEnumerateCategories(GUID** ppAuditCategoriesArray,PULONG pCountReturned);
int __stdcall AuditEnumeratePerUserPolicy(PPOLICY_AUDIT_SID_ARRAY* ppAuditSidArray);
int __stdcall AuditEnumerateSubCategories(const GUID* pAuditCategoryGuid,BOOLEAN bRetrieveAllSubCategories,GUID** ppAuditSubCategoriesArray,PULONG pCountReturned);
int __stdcall AuditFree(PVOID Buffer);
int __stdcall AuditLookupCategoryGuidFromCategoryId(POLICY_AUDIT_EVENT_TYPE AuditCategoryId,GUID* pAuditCategoryGuid);
int __stdcall AuditLookupCategoryIdFromCategoryGuid(const GUID* pAuditCategoryGuid,PPOLICY_AUDIT_EVENT_TYPE pAuditCategoryId);
int __stdcall AuditLookupCategoryName(const GUID* pAuditCategoryGuid,PTSTR* ppszCategoryName);
int __stdcall AuditLookupSubCategoryName(const GUID* pAuditSubCategoryGuid,PTSTR* ppszSubCategoryName);
int __stdcall AuditQueryPerUserPolicy(const PSID pSid,const GUID* pSubCategoryGuids,ULONG PolicyCount,PAUDIT_POLICY_INFORMATION* ppAuditPolicy);
int __stdcall AuditQuerySecurity(SECURITY_INFORMATION SecurityInformation,PSECURITY_DESCRIPTOR* ppSecurityDescriptor);
int __stdcall AuditQuerySystemPolicy(const GUID* pSubCategoryGuids,ULONG PolicyCount,PAUDIT_POLICY_INFORMATION* ppAuditPolicy);
int __stdcall AuditSetPerUserPolicy(const PSID pSid,PCAUDIT_POLICY_INFORMATION pAuditPolicy,ULONG PolicyCount);
int __stdcall AuditSetSecurity(SECURITY_INFORMATION SecurityInformation,PSECURITY_DESCRIPTOR pSecurityDescriptor);
int __stdcall AuditSetSystemPolicy(PCAUDIT_POLICY_INFORMATION pAuditPolicy,ULONG PolicyCount);
int __stdcall BackupEventLog(HANDLE hEventLog,LPCTSTR lpBackupFileName);
int __stdcall BuildExplicitAccessWithName(PEXPLICIT_ACCESS pExplicitAccess,LPTSTR pTrusteeName,DWORD AccessPermissions,ACCESS_MODE AccessMode,DWORD Inheritance);
int __stdcall BuildSecurityDescriptor(PTRUSTEE pOwner,PTRUSTEE pGroup,ULONG cCountOfAccessEntries,PEXPLICIT_ACCESS pListOfAccessEntries,ULONG cCountOfAuditEntries,PEXPLICIT_ACCESS pListOfAuditEntries,PSECURITY_DESCRIPTOR pOldSD,PULONG pSizeNewSD,PSECURITY_DESCRIPTOR* pNewSD);
int __stdcall BuildTrusteeWithName(PTRUSTEE pTrustee,LPTSTR pName);
int __stdcall BuildTrusteeWithObjectsAndName(PTRUSTEE pTrustee,POBJECTS_AND_NAME pObjName,SE_OBJECT_TYPE ObjectType,LPTSTR ObjectTypeName,LPTSTR InheritedObjectTypeName,LPTSTR Name);
int __stdcall BuildTrusteeWithObjectsAndSid(PTRUSTEE pTrustee,POBJECTS_AND_SID pObjSid,GUID* pObjectGuid,GUID* pInheritedObjectGuid,PSID pSid);
int __stdcall BuildTrusteeWithSid(PTRUSTEE pTrustee,PSID pSid);
int __stdcall ChangeServiceConfig(SC_HANDLE hService,DWORD dwServiceType,DWORD dwStartType,DWORD dwErrorControl,LPCTSTR lpBinaryPathName,LPCTSTR lpLoadOrderGroup,LPDWORD lpdwTagId,LPCTSTR lpDependencies,LPCTSTR lpServiceStartName,LPCTSTR lpPassword,LPCTSTR lpDisplayName);
int __stdcall ChangeServiceConfig2(SC_HANDLE hService,DWORD dwInfoLevel,LPVOID lpInfo);
int __stdcall CheckTokenMembership(HANDLE TokenHandle,PSID SidToCheck,PBOOL IsMember);
int __stdcall ClearEventLog(HANDLE hEventLog,LPCTSTR lpBackupFileName);
int __stdcall CloseEncryptedFileRaw(PVOID pvContext);
int __stdcall CloseEventLog(HANDLE hEventLog);
int __stdcall CloseServiceHandle(SC_HANDLE hSCObject);
int __stdcall CloseThreadWaitChainSession(HWCT WctHandle);
int __stdcall CloseTrace(TRACEHANDLE TraceHandle);
int __stdcall ControlService(SC_HANDLE hService,DWORD dwControl,LPSERVICE_STATUS lpServiceStatus);
int __stdcall ControlServiceEx(SC_HANDLE hService,DWORD dwControl,DWORD dwInfoLevel,PVOID pControlParams);
int __stdcall ControlTrace(TRACEHANDLE SessionHandle,LPCTSTR SessionName,PEVENT_TRACE_PROPERTIES Properties,ULONG ControlCode);
int __stdcall ConvertSecurityDescriptorToStringSecurityDescriptor(PSECURITY_DESCRIPTOR SecurityDescriptor,DWORD RequestedStringSDRevision,SECURITY_INFORMATION SecurityInformation,LPTSTR* StringSecurityDescriptor,PULONG StringSecurityDescriptorLen);
int __stdcall ConvertSidToStringSid(PSID Sid,LPTSTR* StringSid);
int __stdcall ConvertStringSecurityDescriptorToSecurityDescriptor(LPCTSTR StringSecurityDescriptor,DWORD StringSDRevision,PSECURITY_DESCRIPTOR* SecurityDescriptor,PULONG SecurityDescriptorSize);
int __stdcall ConvertStringSidToSid(LPCTSTR StringSid,PSID* Sid);
int __stdcall ConvertToAutoInheritPrivateObjectSecurity(PSECURITY_DESCRIPTOR ParentDescriptor,PSECURITY_DESCRIPTOR CurrentSecurityDescriptor,PSECURITY_DESCRIPTOR* NewSecurityDescriptor,GUID* ObjectType,BOOLEAN IsDirectoryObject,PGENERIC_MAPPING GenericMapping);
int __stdcall CopySid(DWORD nDestinationSidLength,PSID pDestinationSid,PSID pSourceSid);
int __stdcall CreatePrivateObjectSecurity(PSECURITY_DESCRIPTOR ParentDescriptor,PSECURITY_DESCRIPTOR CreatorDescriptor,PSECURITY_DESCRIPTOR* NewDescriptor,BOOL IsDirectoryObject,HANDLE Token,PGENERIC_MAPPING GenericMapping);
int __stdcall CreatePrivateObjectSecurityEx(PSECURITY_DESCRIPTOR ParentDescriptor,PSECURITY_DESCRIPTOR CreatorDescriptor,PSECURITY_DESCRIPTOR* NewDescriptor,GUID* ObjectType,BOOL IsContainerObject,DWORD AutoInheritFlags,HANDLE Token,PGENERIC_MAPPING GenericMapping);
int __stdcall CreatePrivateObjectSecurityWithMultipleInheritance(PSECURITY_DESCRIPTOR ParentDescriptor,PSECURITY_DESCRIPTOR CreatorDescriptor,PSECURITY_DESCRIPTOR* NewDescriptor,GUID** ObjectTypes,ULONG GuidCount,BOOL IsContainerObject,DWORD AutoInheritFlags,HANDLE Token,PGENERIC_MAPPING GenericMapping);
int __stdcall CreateProcessAsUser(HANDLE hToken,LPCTSTR lpApplicationName,LPTSTR lpCommandLine,LPSECURITY_ATTRIBUTES lpProcessAttributes,LPSECURITY_ATTRIBUTES lpThreadAttributes,BOOL bInheritHandles,DWORD dwCreationFlags,LPVOID lpEnvironment,LPCTSTR lpCurrentDirectory,LPSTARTUPINFO lpStartupInfo,LPPROCESS_INFORMATION lpProcessInformation);
int __stdcall CreateProcessWithLogonW(LPCWSTR lpUsername,LPCWSTR lpDomain,LPCWSTR lpPassword,DWORD dwLogonFlags,LPCWSTR lpApplicationName,LPWSTR lpCommandLine,DWORD dwCreationFlags,LPVOID lpEnvironment,LPCWSTR lpCurrentDirectory,LPSTARTUPINFOW lpStartupInfo,LPPROCESS_INFORMATION lpProcessInfo);
int __stdcall CreateProcessWithTokenW(HANDLE hToken,DWORD dwLogonFlags,LPCWSTR lpApplicationName,LPWSTR lpCommandLine,DWORD dwCreationFlags,LPVOID lpEnvironment,LPCWSTR lpCurrentDirectory,LPSTARTUPINFOW lpStartupInfo,LPPROCESS_INFORMATION lpProcessInfo);
int __stdcall CreateRestrictedToken(HANDLE ExistingTokenHandle,CreateRestrictedTokenFlags Flags,DWORD DisableSidCount,PSID_AND_ATTRIBUTES SidsToDisable,DWORD DeletePrivilegeCount,PLUID_AND_ATTRIBUTES PrivilegesToDelete,DWORD RestrictedSidCount,PSID_AND_ATTRIBUTES SidsToRestrict,PHANDLE NewTokenHandle);
int __stdcall CreateService(SC_HANDLE hSCManager,LPCTSTR lpServiceName,LPCTSTR lpDisplayName,DWORD dwDesiredAccess,DWORD dwServiceType,DWORD dwStartType,DWORD dwErrorControl,LPCTSTR lpBinaryPathName,LPCTSTR lpLoadOrderGroup,LPDWORD lpdwTagId,LPCTSTR lpDependencies,LPCTSTR lpServiceStartName,LPCTSTR lpPassword);
int __stdcall CreateServiceA(SC_HANDLE hSCManager,LPCTSTR lpServiceName,LPCTSTR lpDisplayName,DWORD dwDesiredAccess,DWORD dwServiceType,DWORD dwStartType,DWORD dwErrorControl,LPCTSTR lpBinaryPathName,LPCTSTR lpLoadOrderGroup,LPDWORD lpdwTagId,LPCTSTR lpDependencies,LPCTSTR lpServiceStartName,LPCTSTR lpPassword);
int __stdcall CreateServiceW(SC_HANDLE hSCManager,LPCTSTR lpServiceName,LPCTSTR lpDisplayName,DWORD dwDesiredAccess,DWORD dwServiceType,DWORD dwStartType,DWORD dwErrorControl,LPCTSTR lpBinaryPathName,LPCTSTR lpLoadOrderGroup,LPDWORD lpdwTagId,LPCTSTR lpDependencies,LPCTSTR lpServiceStartName,LPCTSTR lpPassword);
int __stdcall CreateTraceInstanceId(HANDLE RegHandle,PEVENT_INSTANCE_INFO pInstInfo);
int __stdcall CreateWellKnownSid(WELL_KNOWN_SID_TYPE WellKnownSidType,PSID DomainSid,PSID pSid,DWORD* cbSid);
int __stdcall CredDelete(LPCTSTR TargetName,DWORD Type,DWORD Flags);
int __stdcall CredEnumerate(LPCTSTR Filter,DWORD Flags,DWORD* Count,PCREDENTIAL** Credentials);
int __stdcall CredFindBestCredential(LPCTSTR TargetName,DWORD Type,DWORD Flags,PCREDENTIAL* Credential);
int __stdcall CredFree(PVOID Buffer);
int __stdcall CredGetSessionTypes(DWORD MaximumPersistCount,LPDWORD MaximumPersist);
int __stdcall CredGetTargetInfo(LPCTSTR TargetName,DWORD Flags,PCREDENTIAL_TARGET_INFORMATION* TargetInfo);
int __stdcall CredIsMarshaledCredential(LPTSTR MarshaledCredential);
int __stdcall CredIsProtected(LPTSTR pszProtectedCredentials,CRED_PROTECTION_TYPE* pProtectionType);
int __stdcall CredMarshalCredential(CRED_MARSHAL_TYPE CredType,PVOID Credential,LPTSTR* MarshaledCredential);
int __stdcall CredProtect(BOOL fAsSelf,LPTSTR pszCredentials,DWORD cchCredentials,LPTSTR pszProtectedCredentials,DWORD* pcchMaxChars,CRED_PROTECTION_TYPE* ProtectionType);
int __stdcall CredRead(LPCTSTR TargetName,DWORD Type,DWORD Flags,PCREDENTIAL* Credential);
int __stdcall CredReadDomainCredentials(PCREDENTIAL_TARGET_INFORMATION TargetInfo,DWORD Flags,DWORD* Count,PCREDENTIAL** Credentials);
int __stdcall CredRename(LPCTSTR OldTargetName,LPCTSTR NewTargetName,DWORD Type,DWORD Flags);
int __stdcall CredUnmarshalCredential(LPCTSTR MarshaledCredential,PCRED_MARSHAL_TYPE CredType,PVOID* Credential);
int __stdcall CredUnprotect(BOOL fAsSelf,LPTSTR pszProtectedCredentials,DWORD cchCredentials,LPTSTR pszCredentials,DWORD* pcchMaxChars);
int __stdcall CredWrite(PCREDENTIAL Credential,DWORD Flags);
int __stdcall CredWriteDomainCredentials(PCREDENTIAL_TARGET_INFORMATION TargetInfo,PCREDENTIAL Credential,DWORD Flags);
int __stdcall CryptAcquireContext(HCRYPTPROV* phProv,LPCTSTR pszContainer,LPCTSTR pszProvider,DWORD dwProvType,DWORD dwFlags);
int __stdcall CryptAcquireContextW(HCRYPTPROV* phProv,LPCTSTR pszContainer,LPCTSTR pszProvider,DWORD dwProvType,DWORD dwFlags);
int __stdcall CryptContextAddRef(HCRYPTPROV hProv,DWORD* pdwReserved,DWORD dwFlags);
int __stdcall CryptCreateHash(HCRYPTPROV hProv,ALG_ID Algid,HCRYPTKEY hKey,DWORD dwFlags,HCRYPTHASH* phHash);
int __stdcall CryptDecrypt(HCRYPTKEY hKey,HCRYPTHASH hHash,BOOL Final,DWORD dwFlags,BYTE* pbData,DWORD* pcbData);
int __stdcall CryptDeriveKey(HCRYPTPROV hProv,ALG_ID Algid,HCRYPTHASH hBaseData,DWORD dwFlags,HCRYPTKEY* phKey);
int __stdcall CryptDestroyHash(HCRYPTHASH hHash);
int __stdcall CryptDestroyKey(HCRYPTKEY hXchgKey);
int __stdcall CryptDuplicateHash(HCRYPTHASH hHash,DWORD* pdwReserved,DWORD dwFlags,HCRYPTHASH* phHash);
int __stdcall CryptDuplicateKey(HCRYPTKEY hKey,DWORD* pdwReserved,DWORD dwFlags,HCRYPTKEY* phKey);
int __stdcall CryptEncrypt(HCRYPTKEY hKey,HCRYPTHASH hHash,BOOL Final,DWORD dwFlags,BYTE* pbData,DWORD* pdwDataLen,DWORD dwBufLen);
int __stdcall CryptEnumProviderTypes(DWORD dwIndex,DWORD* pdwReserved,DWORD dwFlags,DWORD pdwProvType,LPTSTR pszTypeName,DWORD* pcbTypeName);
int __stdcall CryptEnumProviders(DWORD dwIndex,DWORD* pdwReserved,DWORD dwFlags,DWORD pdwProvType,LPTSTR pszProvName,DWORD* pcbProvName);
int __stdcall CryptExportKey(HCRYPTKEY hKey,HCRYPTKEY hExpKey,DWORD dwBlobType,DWORD dwFlags,BYTE* pbData,DWORD* pdwbDataLen);
int __stdcall CryptGenKey(HCRYPTPROV hProv,ALG_ID Algid,DWORD dwFlags,HCRYPTKEY* phKey);
int __stdcall CryptGenRandom(HCRYPTPROV hProv,DWORD dwLen,BYTE* pbBuffer);
int __stdcall CryptGetDefaultProvider(DWORD dwProvType,DWORD* pdwReserved,DWORD dwFlags,LPTSTR pszProvName,DWORD* pcbProvName);
int __stdcall CryptGetHashParam(HCRYPTHASH hHash,DWORD dwParam,BYTE* pbData,DWORD* pdwDataLen,DWORD dwFlags);
int __stdcall CryptGetKeyParam(HCRYPTKEY hKey,DWORD dwParam,BYTE* pbData,DWORD* pdwDataLen,DWORD dwFlags);
int __stdcall CryptGetProvParam(HCRYPTPROV hProv,DWORD dwParam,BYTE* pbData,DWORD* pdwDataLen,DWORD dwFlags);
int __stdcall CryptGetUserKey(HCRYPTPROV hProv,DWORD dwKeySpec,HCRYPTKEY* hKey);
int __stdcall CryptHashData(HCRYPTHASH hHash,BYTE* pbData,DWORD dwDataLen,DWORD dwFlags);
int __stdcall CryptHashSessionKey(HCRYPTHASH hHash,HCRYPTKEY hKey,DWORD dwFlags);
int __stdcall CryptImportKey(HCRYPTPROV hProv,BYTE* pbData,DWORD dwDataLen,HCRYPTKEY hPubKey,DWORD dwFlags,HCRYPTKEY* phKey);
int __stdcall CryptReleaseContext(HCRYPTPROV hProv);
int __stdcall CryptSetHashParam(HCRYPTHASH hHash,DWORD dwParam,const BYTE* pbData,DWORD dwFlags);
int __stdcall CryptSetKeyParam(HCRYPTKEY hKey,DWORD dwParam,const BYTE* pbData,DWORD dwFlags);
int __stdcall CryptSetProvParam(HCRYPTPROV hProv,DWORD dwParam,const BYTE* pbData,DWORD dwFlags);
int __stdcall CryptSetProvider(LPCTSTR pszProvName,DWORD dwProvType);
int __stdcall CryptSetProviderEx(LPCTSTR pszProvName,DWORD dwProvType,DWORD* pdwReserved,DWORD dwFlags);
int __stdcall CryptSignHash(HCRYPTHASH hHash,DWORD dwKeySpec,LPCTSTR sDescription,DWORD dwFlags,BYTE* pbSignature,DWORD* pdwSigLen);
int __stdcall CryptVerifySignature(HCRYPTHASH hHash,BYTE* pbSignature,DWORD dwSigLen,HCRYPTKEY hPubKey,LPCTSTR sDescription,DWORD dwFlags);
int __stdcall DecryptFile(LPCTSTR lpFileName,DWORD dwReserved);
int __stdcall DeleteAce(PACL pAcl,DWORD dwAceIndex);
int __stdcall DeleteService(SC_HANDLE hService);
int __stdcall DeregisterEventSource(HANDLE hEventLog);
int __stdcall DestroyPrivateObjectSecurity(PSECURITY_DESCRIPTOR* ObjectDescriptor);
int __stdcall DuplicateEncryptionInfoFile(LPCTSTR SrcFileName,LPCTSTR DstFileName,DWORD dwCreationDistribution,DWORD dwAttributes,const LPSECURITY_ATTRIBUTES lpSecurityAttributes);
int __stdcall DuplicateToken(HANDLE ExistingTokenHandle,SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,PHANDLE DuplicateTokenHandle);
int __stdcall DuplicateTokenEx(HANDLE hExistingToken,DWORD dwDesiredAccess,LPSECURITY_ATTRIBUTES lpTokenAttributes,SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,TOKEN_TYPE TokenType,PHANDLE phNewToken);
int __stdcall EnableTrace(ULONG Enable,ULONG EnableFlag,ULONG EnableLevel,LPCGUID ControlGuid,TRACEHANDLE SessionHandle);
int __stdcall EnableTraceEx(LPCGUID ProviderId,LPCGUID SourceId,TRACEHANDLE TraceHandle,ULONG IsEnabled,UCHAR Level,ULONGLONG MatchAnyKeyword,ULONGLONG MatchAllKeyword,ULONG EnableProperty,PEVENT_FILTER_DESCRIPTOR EnableFilterDesc);
int __stdcall EnableTraceEx2(TRACEHANDLE TraceHandle,LPCGUID ProviderId,ULONG ControlCode,UCHAR Level,ULONGLONG MatchAnyKeyword,ULONGLONG MatchAllKeyword,ULONG Timeout,PENABLE_TRACE_PARAMETERS EnableParameters);
int __stdcall EncryptFile(LPCTSTR lpFileName);
int __stdcall EncryptionDisable(LPCWSTR DirPath,BOOL Disable);
int __stdcall EnumDependentServices(SC_HANDLE hService,DWORD dwServiceState,LPENUM_SERVICE_STATUS lpServices,DWORD cbBufSize,LPDWORD pcbBytesNeeded,LPDWORD lpServicesReturned);
int __stdcall EnumServicesStatus(SC_HANDLE hSCManager,DWORD dwServiceType,DWORD dwServiceState,LPENUM_SERVICE_STATUS lpServices,DWORD cbBufSize,LPDWORD pcbBytesNeeded,LPDWORD lpServicesReturned,LPDWORD lpResumeHandle);
int __stdcall EnumServicesStatusEx(SC_HANDLE hSCManager,SC_ENUM_TYPE InfoLevel,DWORD dwServiceType,DWORD dwServiceState,LPBYTE lpServices,DWORD cbBufSize,LPDWORD pcbBytesNeeded,LPDWORD lpServicesReturned,LPDWORD lpResumeHandle,LPCTSTR pszGroupName);
int __stdcall EnumerateTraceGuids(PTRACE_GUID_PROPERTIES* GuidPropertiesArray,ULONG PropertyArrayCount,PULONG GuidCount);
int __stdcall EnumerateTraceGuidsEx(TRACE_QUERY_INFO_CLASS TraceQueryInfoClass,PVOID InBuffer,ULONG InBufferSize,PVOID OutBuffer,ULONG OutBufferSize,PULONG ReturnLength);
int __stdcall EqualDomainSid(PSID pSid1,PSID pSid2,BOOL* pfEqual);
int __stdcall EqualPrefixSid(PSID pSid1,PSID pSid2);
int __stdcall EqualSid(PSID pSid1,PSID pSid2);
int __stdcall EventAccessControl(LPGUID Guid,ULONG Operation,PSID Sid,ULONG Rights,BOOLEAN AllowOrDeny);
int __stdcall EventAccessQuery(LPGUID Guid,PSECURITY_DESCRIPTOR Buffer,PULONG BufferSize);
int __stdcall EventAccessRemove(LPGUID Guid);
int __stdcall EventActivityIdControl(DWORD ControlCode,LPGUID ActivityId);
int __stdcall EventEnabled(REGHANDLE RegHandle,PCEVENT_DESCRIPTOR EventDescriptor);
int __stdcall EventProviderEnabled(REGHANDLE RegHandle,UCHAR Level,ULONGLONG Keyword);
int __stdcall EventRegister(LPCGUID ProviderId,ENABLECALLBACK EnableCallback,PVOID CallbackContext,PREGHANDLE RegHandle);
int __stdcall EventUnregister(REGHANDLE RegHandle);
int __stdcall EventWrite(REGHANDLE RegHandle,PCEVENT_DESCRIPTOR EventDescriptor,ULONG UserDataCount,PEVENT_DATA_DESCRIPTOR UserData);
int __stdcall EventWriteString(REGHANDLE RegHandle,UCHAR Level,ULONGLONG Keyword,PCWSTR String);
int __stdcall EventWriteTransfer(REGHANDLE RegHandle,PCEVENT_DESCRIPTOR EventDescriptor,LPCGUID ActivityId,LPCGUID RelatedActivityId,ULONG UserDataCount,PEVENT_DATA_DESCRIPTOR UserData);
int __stdcall FileEncryptionStatus(LPCTSTR lpFileName,LPDWORD lpStatus);
int __stdcall FindFirstFreeAce(PACL pAcl,LPVOID* pAce);
int __stdcall FlushTrace(TRACEHANDLE SessionHandle,LPCTSTR SessionName,PEVENT_TRACE_PROPERTIES Properties);
int __stdcall FreeEncryptionCertificateHashList(PENCRYPTION_CERTIFICATE_HASH_LIST pHashes);
int __stdcall FreeInheritedFromArray(PINHERITED_FROM pInheritArray,USHORT AceCnt,PFN_OBJECT_MGR_FUNCTS pfnArray);
int __stdcall FreeSid(PSID pSid);
int __stdcall GetAce(PACL pAcl,DWORD dwAceIndex,LPVOID* lpAce);
int __stdcall GetAclInformation(PACL pAcl,LPVOID pAclInformation,DWORD nAclInformationLength,ACL_INFORMATION_CLASS dwAclInformationClass);
int __stdcall GetAuditedPermissionsFromAcl(PACL pacl,PTRUSTEE pTrustee,PACCESS_MASK pSuccessfulAuditedRights,PACCESS_MASK pFailedAuditRights);
int __stdcall GetAuditedPermissionsFromAclA(PACL pacl,PTRUSTEE pTrustee,PACCESS_MASK pSuccessfulAuditedRights,PACCESS_MASK pFailedAuditRights);
int __stdcall GetAuditedPermissionsFromAclW(PACL pacl,PTRUSTEE pTrustee,PACCESS_MASK pSuccessfulAuditedRights,PACCESS_MASK pFailedAuditRights);
int __stdcall GetCurrentHwProfile(LPHW_PROFILE_INFO lpHwProfileInfo);
int __stdcall GetEffectiveRightsFromAcl(PACL pacl,PTRUSTEE pTrustee,PACCESS_MASK pAccessRights);
int __stdcall GetEventLogInformation(HANDLE hEventLog,DWORD dwInfoLevel,LPVOID lpBuffer,DWORD cbBufSize,LPDWORD pcbBytesNeeded);
int __stdcall GetExplicitEntriesFromAcl(PACL pacl,PULONG pcCountOfExplicitEntries,PEXPLICIT_ACCESS* pListOfExplicitEntries);
int __stdcall GetFileSecurity(LPCTSTR lpFileName,SECURITY_INFORMATION RequestedInformation,PSECURITY_DESCRIPTOR pSecurityDescriptor,DWORD nLength,LPDWORD lpnLengthNeeded);
int __stdcall GetInheritanceSource(LPTSTR pObjectName,SE_OBJECT_TYPE ObjectType,SECURITY_INFORMATION SecurityInfo,BOOL Container,GUID** pObjectClassGuids,DWORD GuidCount,PACL pAcl,PFN_OBJECT_MGR_FUNCTS pfnArray,PGENERIC_MAPPING pGenericMapping,PINHERITED_FROM pInheritArray);
int __stdcall GetKernelObjectSecurity(HANDLE Handle,SECURITY_INFORMATION RequestedInformation,PSECURITY_DESCRIPTOR pSecurityDescriptor,DWORD nLength,LPDWORD lpnLengthNeeded);
int __stdcall GetLengthSid(PSID pSid);
int __stdcall GetLocalManagedApplications(BOOL bUserApps,LPDWORD pdwApps,PLOCALMANAGEDAPPLICATION* prgLocalApps);
int __stdcall GetManagedApplicationCategories(DWORD dwReserved,APPCATEGORYINFOLIST* pAppCategory);
int __stdcall GetManagedApplications(GUID* pCategory,DWORD dwQueryFlags,DWORD dwInfoLevel,LPDWORD pdwApps,PMANAGEDAPPLICATION* prgManagedApps);
int __stdcall GetNamedSecurityInfo(LPTSTR pObjectName,SE_OBJECT_TYPE ObjectType,SECURITY_INFORMATION SecurityInfo,PSID* ppsidOwner,PSID* ppsidGroup,PACL* ppDacl,PACL* ppSacl,PSECURITY_DESCRIPTOR* ppSecurityDescriptor);
int __stdcall GetNumberOfEventLogRecords(HANDLE hEventLog,PDWORD NumberOfRecords);
int __stdcall GetOldestEventLogRecord(HANDLE hEventLog,PDWORD OldestRecord);
int __stdcall GetPrivateObjectSecurity(PSECURITY_DESCRIPTOR ObjectDescriptor,SECURITY_INFORMATION SecurityInformation,PSECURITY_DESCRIPTOR ResultantDescriptor,DWORD DescriptorLength,PDWORD ReturnLength);
int __stdcall GetSecurityDescriptorControl(PSECURITY_DESCRIPTOR pSecurityDescriptor,PSECURITY_DESCRIPTOR_CONTROL pControl,DWORD lpdwRevision);
int __stdcall GetSecurityDescriptorDacl(PSECURITY_DESCRIPTOR pSecurityDescriptor,LPBOOL lpbDaclPresent,PACL* pDacl,LPBOOL lpbDaclDefaulted);
int __stdcall GetSecurityDescriptorGroup(PSECURITY_DESCRIPTOR pSecurityDescriptor,PSID* pGroup,LPBOOL lpbGroupDefaulted);
int __stdcall GetSecurityDescriptorLength(PSECURITY_DESCRIPTOR pSecurityDescriptor);
int __stdcall GetSecurityDescriptorOwner(PSECURITY_DESCRIPTOR pSecurityDescriptor,PSID* pOwner,LPBOOL lpbOwnerDefaulted);
int __stdcall GetSecurityDescriptorSacl(PSECURITY_DESCRIPTOR pSecurityDescriptor,LPBOOL lpbSaclPresent,PACL* pSacl,LPBOOL lpbSaclDefaulted);
int __stdcall GetSecurityInfo(HANDLE handle,SE_OBJECT_TYPE ObjectType,SECURITY_INFORMATION SecurityInfo,PSID* ppsidOwner,PSID* ppsidGroup,PACL* ppDacl,PACL* ppSacl,PSECURITY_DESCRIPTOR* ppSecurityDescriptor);
int __stdcall GetServiceDisplayName(SC_HANDLE hSCManager,LPCTSTR lpServiceName,LPTSTR lpDisplayName,LPDWORD lpcchBuffer);
int __stdcall GetServiceKeyName(SC_HANDLE hSCManager,LPCTSTR lpDisplayName,LPTSTR lpServiceName,LPDWORD lpcchBuffer);
int __stdcall GetSidIdentifierAuthority(PSID pSid);
int __stdcall GetSidLengthRequired(UCHAR nSubAuthorityCount);
int __stdcall GetSidSubAuthority(PSID pSid,DWORD nSubAuthority);
int __stdcall GetSidSubAuthorityCount(PSID pSid);
int __stdcall GetThreadWaitChain(HWCT WctHandle,DWORD_PTR Context,DWORD Flags,DWORD ThreadId,LPDWORD NodeCount,PWAITCHAIN_NODE_INFO NodeInfoArray,LPBOOL IsCycle);
int __stdcall GetTokenInformation(HANDLE TokenHandle,TOKEN_INFORMATION_CLASS TokenInformationClass,LPVOID TokenInformation,DWORD TokenInformationLength,PDWORD ReturnLength);
int __stdcall GetTraceEnableFlags(TRACEHANDLE SessionHandle);
int __stdcall GetTraceEnableLevel(TRACEHANDLE SessionHandle);
int __stdcall GetTraceLoggerHandle(PVOID Buffer);
int __stdcall GetTrusteeForm(PTRUSTEE pTrustee);
int __stdcall GetTrusteeName(PTRUSTEE pTrustee);
int __stdcall GetTrusteeType(PTRUSTEE pTrustee);
int __stdcall GetUserName(LPTSTR lpBuffer,LPDWORD lpnSize);
int __stdcall GetUserNameA(LPTSTR lpBuffer,LPDWORD nBufferSize);
int __stdcall GetUserNameW(LPTSTR lpBuffer,LPDWORD nBufferSize);
int __stdcall GetWindowsAccountDomainSid(PSID pSid,PSID ppDomainSid,DWORD* cbSid);
int __stdcall ImpersonateAnonymousToken(HANDLE ThreadHandle);
int __stdcall ImpersonateLoggedOnUser(HANDLE hToken);
int __stdcall ImpersonateNamedPipeClient(HANDLE hNamedPipe);
int __stdcall ImpersonateSelf(SECURITY_IMPERSONATION_LEVEL ImpersonationLevel);
int __stdcall InitializeAcl(PACL pAcl,DWORD nAclLength,DWORD dwAclRevision);
int __stdcall InitializeSecurityDescriptor(PSECURITY_DESCRIPTOR pSecurityDescriptor,DWORD dwRevision);
int __stdcall InitializeSid(PSID Sid,PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority,BYTE nSubAuthorityCount);
int __stdcall InitiateShutdown(LPTSTR lpMachineName,LPTSTR lpMessage,DWORD dwGracePeriod,DWORD dwShutdownFlags,DWORD dwReason);
int __stdcall InitiateSystemShutdown(LPTSTR lpMachineName,LPTSTR lpMessage,DWORD dwTimeout,BOOL bForceAppsClosed,BOOL bRebootAfterShutdown);
int __stdcall InitiateSystemShutdownEx(LPTSTR lpMachineName,LPTSTR lpMessage,DWORD dwTimeout,BOOL bForceAppsClosed,BOOL bRebootAfterShutdown,DWORD dwReason);
int __stdcall InstallApplication(PINSTALLDATA* pInstallInfo);
int __stdcall IsTextUnicode(const VOID* lpStockBuffer,int iSize,DWORD lpiFlag);
int __stdcall IsTokenRestricted(HANDLE TokenHandle);
int __stdcall IsValidAcl(PACL pAcl);
int __stdcall IsValidSecurityDescriptor(PSECURITY_DESCRIPTOR pSecurityDescriptor);
int __stdcall IsValidSid(PSID pSid);
int __stdcall IsWellKnownSid(PSID pSid,WELL_KNOWN_SID_TYPE WellKnownSidType);
int __stdcall LockServiceDatabase(SC_HANDLE hSCManager);
int __stdcall LogonUser(LPTSTR lpszUsername,LPTSTR lpszDomain,LPTSTR lpszPassword,DWORD dwLogonType,DWORD dwLogonProvider,PHANDLE phToken);
int __stdcall LogonUserEx(LPTSTR lpszUsername,LPTSTR lpszDomain,LPTSTR lpszPassword,DWORD dwLogonType,DWORD dwLogonProvider,PHANDLE phToken,PSID* ppLogonSid,PVOID* ppProfileBuffer,LPDWORD pdwProfileLength,PQUOTA_LIMITS pQuotaLimits);
int __stdcall LogonUserExExW(LPWSTR lpszUsername,LPWSTR lpszDomain,LPWSTR lpszPassword,DWORD dwLogonType,PTOKEN_GROUPS pTokenGroups,DWORD dwLogonProvider,PHANDLE phToken,PSID* ppLogonSid,PVOID* ppProfileBuffer,LPDWORD pdwProfileLength,PQUOTA_LIMITS pQuotaLimits);
int __stdcall LookupAccountName(LPCTSTR lpSystemName,LPCTSTR lpAccountName,PSID Sid,LPDWORD cbSid,LPTSTR ReferencedDomainName,LPDWORD cchReferencedDomainName,PSID_NAME_USE peUse);
int __stdcall LookupAccountSid(LPCTSTR lpSystemName,PSID lpSid,LPTSTR lpName,LPDWORD cchName,LPTSTR lpReferencedDomainName,LPDWORD cchReferencedDomainName,PSID_NAME_USE peUse);
int __stdcall LookupPrivilegeDisplayName(LPCTSTR lpSystemName,LPCTSTR lpName,LPTSTR lpDisplayName,LPDWORD cchDisplayName,LPDWORD lpLanguageId);
int __stdcall LookupPrivilegeName(LPCTSTR lpSystemName,PLUID lpLuid,LPTSTR lpName,LPDWORD cchName);
int __stdcall LookupPrivilegeValue(LPCTSTR lpSystemName,LPCTSTR lpName,PLUID lpLuid);
int __stdcall LookupPrivilegeValueW(LPCTSTR lpSystemName,LPCTSTR lpName,PLUID lpLuid);
int __stdcall LookupSecurityDescriptorParts(PTRUSTEE* pOwner,PTRUSTEE* pGroup,PULONG cCountOfAccessEntries,PEXPLICIT_ACCESS* pListOfAccessEntries,PULONG cCountOfAuditEntries,PEXPLICIT_ACCESS* pListOfAuditEntries,PSECURITY_DESCRIPTOR pSD);
int __stdcall LsaAddAccountRights(LSA_HANDLE PolicyHandle,PSID AccountSid,PLSA_UNICODE_STRING UserRights,ULONG CountOfRights);
int __stdcall LsaClose(LSA_HANDLE ObjectHandle);
int __stdcall LsaCreateTrustedDomainEx(LSA_HANDLE PolicyHandle,PTRUSTED_DOMAIN_INFORMATION_EX TrustedDomainInformation,PTRUSTED_DOMAIN_AUTH_INFORMATION AuthenticationInformation,ACCESS_MASK DesiredAccess,PLSA_HANDLE TrustedDomainHandle);
int __stdcall LsaDeleteTrustedDomain(LSA_HANDLE PolicyHandle,PSID TrustedDomainSid);
int __stdcall LsaEnumerateAccountRights(LSA_HANDLE PolicyHandle,PSID AccountSid,PLSA_UNICODE_STRING* UserRights,PULONG CountOfRights);
int __stdcall LsaEnumerateAccountsWithUserRight(LSA_HANDLE PolicyHandle,PLSA_UNICODE_STRING UserRights,PVOID* EnumerationBuffer,PULONG CountReturned);
int __stdcall LsaEnumerateTrustedDomains(LSA_HANDLE PolicyHandle,PLSA_ENUMERATION_HANDLE EnumerationContext,PVOID* Buffer,ULONG PreferedMaximumLength,PULONG CountReturned);
int __stdcall LsaEnumerateTrustedDomainsEx(LSA_HANDLE PolicyHandle,PLSA_ENUMERATION_HANDLE EnumerationContext,PVOID* Buffer,ULONG PreferredMaximumLength,PULONG CountReturned);
int __stdcall LsaFreeMemory(PVOID Buffer);
int __stdcall LsaLookupNames(LSA_HANDLE PolicyHandle,ULONG Count,PLSA_UNICODE_STRING Names,PLSA_REFERENCED_DOMAIN_LIST* ReferencedDomains,PLSA_TRANSLATED_SID* Sids);
int __stdcall LsaLookupNames2(LSA_HANDLE PolicyHandle,ULONG Flags,ULONG Count,PLSA_UNICODE_STRING Names,PLSA_REFERENCED_DOMAIN_LIST* ReferencedDomains,PLSA_TRANSLATED_SID2* Sids);
int __stdcall LsaLookupPrivilegeValue(LSA_HANDLE PolicyHandle,PUNICODE_STRING Name,PLUID Value);
int __stdcall LsaLookupSids(LSA_HANDLE PolicyHandle,ULONG Count,PSID* Sids,PLSA_REFERENCED_DOMAIN_LIST* ReferencedDomains,PLSA_TRANSLATED_NAME* Names);
int __stdcall LsaNtStatusToWinError(NTSTATUS Status);
int __stdcall LsaOpenPolicy(PLSA_UNICODE_STRING SystemName,PLSA_OBJECT_ATTRIBUTES ObjectAttributes,ACCESS_MASK DesiredAccess,PLSA_HANDLE PolicyHandle);
int __stdcall LsaOpenTrustedDomainByName(LSA_HANDLE PolicyHandle,PLSA_UNICODE_STRING TrustedDomainName,ACCESS_MASK DesiredAccess,PLSA_HANDLE TrustedDomainHandle);
int __stdcall LsaQueryDomainInformationPolicy(LSA_HANDLE PolicyHandle,POLICY_DOMAIN_INFORMATION_CLASS InformationClass,PVOID* Buffer);
int __stdcall LsaQueryForestTrustInformation(LSA_HANDLE PolicyHandle,PLSA_UNICODE_STRING TrustedDomainName,PLSA_FOREST_TRUST_INFORMATION* ForestTrustInfo);
int __stdcall LsaQueryInformationPolicy(LSA_HANDLE PolicyHandle,POLICY_INFORMATION_CLASS InformationClass,PVOID* Buffer);
int __stdcall LsaQueryTrustedDomainInfo(LSA_HANDLE PolicyHandle,PSID TrustedDomainSid,TRUSTED_INFORMATION_CLASS InformationClass,PVOID* Buffer);
int __stdcall LsaQueryTrustedDomainInfoByName(LSA_HANDLE PolicyHandle,PLSA_UNICODE_STRING TrustedDomainName,TRUSTED_INFORMATION_CLASS InformationClass,PVOID* Buffer);
int __stdcall LsaRemoveAccountRights(LSA_HANDLE PolicyHandle,PSID AccountSid,BOOLEAN AllRights,PLSA_UNICODE_STRING UserRights,ULONG CountOfRights);
int __stdcall LsaRetrievePrivateData(LSA_HANDLE PolicyHandle,PLSA_UNICODE_STRING KeyName,PLSA_UNICODE_STRING* PrivateData);
int __stdcall LsaSetDomainInformationPolicy(LSA_HANDLE PolicyHandle,POLICY_DOMAIN_INFORMATION_CLASS InformationClass,PVOID Buffer);
int __stdcall LsaSetForestTrustInformation(LSA_HANDLE PolicyHandle,PLSA_UNICODE_STRING TrustedDomainName,PLSA_FOREST_TRUST_INFORMATION ForestTrustInfo,BOOLEAN CheckOnly,PLSA_FOREST_TRUST_COLLISION_INFORMATION* CollisionInfo);
int __stdcall LsaSetInformationPolicy(LSA_HANDLE PolicyHandle,POLICY_INFORMATION_CLASS InformationClass,PVOID Buffer);
int __stdcall LsaSetTrustedDomainInfoByName(LSA_HANDLE PolicyHandle,PLSA_UNICODE_STRING TrustedDomainName,TRUSTED_INFORMATION_CLASS InformationClass,PVOID Buffer);
int __stdcall LsaSetTrustedDomainInformation(LSA_HANDLE PolicyHandle,PSID TrustedDomainSid,TRUSTED_INFORMATION_CLASS InformationClass,PVOID Buffer);
int __stdcall LsaStorePrivateData(LSA_HANDLE PolicyHandle,PLSA_UNICODE_STRING KeyName,PLSA_UNICODE_STRING PrivateData);
int __stdcall MakeAbsoluteSD(PSECURITY_DESCRIPTOR pSelfRelativeSD,PSECURITY_DESCRIPTOR pAbsoluteSD,LPDWORD lpdwAbsoluteSDSize,PACL pDacl,LPDWORD lpdwDaclSize,PACL pSacl,LPDWORD lpdwSaclSize,PSID pOwner,LPDWORD lpdwOwnerSize,PSID pPrimaryGroup,LPDWORD lpdwPrimaryGroupSize);
int __stdcall MakeSelfRelativeSD(PSECURITY_DESCRIPTOR pAbsoluteSD,PSECURITY_DESCRIPTOR pSelfRelativeSD,LPDWORD lpdwBufferLength);
int __stdcall MapGenericMask(PDWORD AccessMask,PGENERIC_MAPPING GenericMapping);
int __stdcall NotifyBootConfigStatus(BOOL BootAcceptable);
int __stdcall NotifyChangeEventLog(HANDLE hEventLog,HANDLE hEvent);
int __stdcall NotifyServiceStatusChange(SC_HANDLE hService,DWORD dwNotifyMask,PSERVICE_NOTIFY pNotifyBuffer);
int __stdcall ObjectCloseAuditAlarm(LPCTSTR SubsystemName,LPVOID HandleId,BOOL GenerateOnClose);
int __stdcall ObjectDeleteAuditAlarm(LPCTSTR SubsystemName,LPVOID HandleId,BOOL GenerateOnClose);
int __stdcall ObjectOpenAuditAlarm(LPCTSTR SubsystemName,LPVOID HandleId,LPTSTR ObjectTypeName,LPTSTR ObjectName,PSECURITY_DESCRIPTOR pSecurityDescriptor,HANDLE ClientToken,DWORD DesiredAccess,DWORD GrantedAccess,PPRIVILEGE_SET Privileges,BOOL ObjectCreation,BOOL AccessGranted,LPBOOL GenerateOnClose);
int __stdcall ObjectPrivilegeAuditAlarm(LPCTSTR SubsystemName,LPVOID HandleId,HANDLE ClientToken,DWORD DesiredAccess,PPRIVILEGE_SET Privileges,BOOL AccessGranted);
int __stdcall OpenBackupEventLog(LPCTSTR lpUNCServerName,LPCTSTR lpFileName);
int __stdcall OpenEncryptedFileRaw(LPCTSTR lpFileName,ULONG ulFlags,PVOID* pvContext);
int __stdcall OpenEventLog(LPCTSTR lpUNCServerName,LPCTSTR lpSourceName);
int __stdcall OpenProcessToken(HANDLE ProcessHandle,DWORD DesiredAccess,PHANDLE TokenHandle);
int __stdcall OpenSCManager(LPCTSTR lpMachineName,LPCTSTR lpDatabaseName,DWORD dwDesiredAccess);
int __stdcall OpenSCManagerA(LPCTSTR lpMachineName,LPCTSTR lpDatabaseName,DWORD dwDesiredAccess);
int __stdcall OpenSCManagerW(LPCTSTR lpMachineName,LPCTSTR lpDatabaseName,DWORD dwDesiredAccess);
int __stdcall OpenService(SC_HANDLE hSCManager,LPCTSTR lpServiceName,DWORD dwDesiredAccess);
int __stdcall OpenServiceA(DWORD hSCManager,DWORD lpserviceName,DWORD dwDesiredAccess);
int __stdcall OpenServiceA(SC_HANDLE hSCManager,LPCTSTR lpServiceName,DWORD dwDesiredAccess);
int __stdcall OpenServiceW(SC_HANDLE hSCManager,LPCTSTR lpserviceName,DWORD dwDesiredAccess);
int __stdcall OpenThreadToken(HANDLE ThreadHandle,DWORD DesiredAccess,BOOL OpenAsSelf,PHANDLE TokenHandle);
int __stdcall OpenThreadWaitChainSession(DWORD Flags,PWAITCHAINCALLBACK callback);
int __stdcall OpenTrace(PEVENT_TRACE_LOGFILE Logfile);
int __stdcall PerfCreateInstance(HANDLE hProvider,LPCGUID CounterSetGuid,LPCWSTR szInstanceName,ULONG dwInstance);
int __stdcall PerfDecrementULongCounterValue(HANDLE hProvider,PPERF_COUNTERSET_INSTANCE pInstance,ULONG CounterId,ULONG lValue);
int __stdcall PerfDecrementULongLongCounterValue(HANDLE hProvider,PPERF_COUNTERSET_INSTANCE pInstance,ULONG CounterId,ULONGLONG llValue);
int __stdcall PerfDeleteInstance(HANDLE hProvider,PPERF_COUNTERSET_INSTANCE InstanceBlock);
int __stdcall PerfIncrementULongCounterValue(HANDLE hProvider,PPERF_COUNTERSET_INSTANCE pInstance,ULONG CounterId,ULONG lValue);
int __stdcall PerfIncrementULongLongCounterValue(HANDLE hProvider,PPERF_COUNTERSET_INSTANCE pInstance,ULONG CounterId,ULONGLONG llValue);
int __stdcall PerfQueryInstance(HANDLE hProvider,LPCGUID CounterSetGuid,LPCWSTR szInstance,ULONG dwInstance);
int __stdcall PerfSetCounterRefValue(HANDLE hProvider,PPERF_COUNTERSET_INSTANCE pInstance,ULONG CounterId,PVOID lpAddr);
int __stdcall PerfSetCounterSetInfo(HANDLE hProvider,PPERF_COUNTERSET_INFO pTemplate,ULONG dwTemplateSize);
int __stdcall PerfSetULongCounterValue(HANDLE hProvider,PPERF_COUNTERSET_INSTANCE pInstance,ULONG CounterId,ULONG lValue);
int __stdcall PerfSetULongLongCounterValue(HANDLE hProvider,PPERF_COUNTERSET_INSTANCE pInstance,ULONG CounterId,ULONGLONG llValue);
int __stdcall PerfStartProvider(LPGUID ProviderGuid,PERFLIBREQUEST ControlCallback,HANDLE* phProvider);
int __stdcall PerfStartProviderEx(LPGUID ProviderGuid,PPERF_PROVIDER_CONTEXT ProviderContext,HANDLE* phProvider);
int __stdcall PerfStopProvider(HANDLE hProvider);
int __stdcall PrivilegeCheck(HANDLE ClientToken,PPRIVILEGE_SET RequiredPrivileges,LPBOOL pfResult);
int __stdcall PrivilegedServiceAuditAlarm(LPCTSTR SubsystemName,LPCTSTR ServiceName,HANDLE ClientToken,PPRIVILEGE_SET Privileges,BOOL AccessGranted);
int __stdcall ProcessTrace(PTRACEHANDLE HandleArray,ULONG HandleCount,LPFILETIME StartTime,LPFILETIME EndTime);
int __stdcall QueryAllTraces(PEVENT_TRACE_PROPERTIES* PropertyArray,ULONG PropertyArrayCount,PULONG SessionCount);
int __stdcall QueryRecoveryAgentsOnEncryptedFile(LPCWSTR lpFileName,PENCRYPTION_CERTIFICATE_HASH_LIST* pRecoveryAgents);
int __stdcall QuerySecurityAccessMask(SECURITY_INFORMATION SecurityInformation,LPDWORD DesiredAccess);
int __stdcall QueryServiceConfig(SC_HANDLE hService,LPQUERY_SERVICE_CONFIG lpServiceConfig,DWORD cbBufSize,LPDWORD pcbBytesNeeded);
int __stdcall QueryServiceConfig2(SC_HANDLE hService,DWORD dwInfoLevel,LPBYTE lpBuffer,DWORD cbBufSize,LPDWORD pcbBytesNeeded);
int __stdcall QueryServiceLockStatus(SC_HANDLE hSCManager,LPQUERY_SERVICE_LOCK_STATUS lpLockStatus,DWORD cbBufSize,LPDWORD pcbBytesNeeded);
int __stdcall QueryServiceObjectSecurity(SC_HANDLE hService,SECURITY_INFORMATION dwSecurityInformation,PSECURITY_DESCRIPTOR lpSecurityDescriptor,DWORD cbBufSize,LPDWORD pcbBytesNeeded);
int __stdcall QueryServiceStatus(SC_HANDLE hService,LPSERVICE_STATUS lpServiceStatus);
int __stdcall QueryServiceStatusEx(SC_HANDLE hService,SC_STATUS_TYPE InfoLevel,LPBYTE lpBuffer,DWORD cbBufSize,LPDWORD pcbBytesNeeded);
int __stdcall QueryTrace(TRACEHANDLE SessionHandle,LPCTSTR SessionName,PEVENT_TRACE_PROPERTIES Properties);
int __stdcall QueryUsersOnEncryptedFile(LPCWSTR lpFileName,PENCRYPTION_CERTIFICATE_HASH_LIST* pUsers);
int __stdcall ReadEncryptedFileRaw(PFE_EXPORT_FUNC pfExportCallback,PVOID pvCallbackContext,PVOID pvContext);
int __stdcall ReadEventLog(HANDLE hEventLog,DWORD dwReadFlags,DWORD dwRecordOffset,LPVOID lpBuffer,DWORD nNumberOfBytesToRead,DWORD* pnBytesRead,DWORD* pnMinNumberOfBytesNeeded);
int __stdcall RegCloseKey(HKEY hKey);
int __stdcall RegConnectRegistry(LPCTSTR lpMachineName,HKEY hKey,PHKEY phkResult);
int __stdcall RegConnectRegistryA(LPCTSTR lpMachineName,HKEY hKey,PHKEY phkResult);
int __stdcall RegConnectRegistryW(LPCTSTR lpMachineName,HKEY hKey,PHKEY phkResult);
int __stdcall RegCopyTree(HKEY hKeySrc,LPCTSTR lpSubKey,HKEY hKeyDest);
int __stdcall RegCreateKey(HKEY hKey,LPCTSTR lpSubKey,PHKEY phkResult);
int __stdcall RegCreateKeyA(HKEY hKey,LPCTSTR lpSubKey,PHKEY phkResult);
int __stdcall RegCreateKeyEx(HKEY hKey,LPCTSTR lpSubKey,DWORD Reserved,LPTSTR lpClass,DWORD dwOptions,REGSAM samDesired,LPSECURITY_ATTRIBUTES lpSecurityAttributes,PHKEY phkResult,DWORD lpdwDisposition);
int __stdcall RegCreateKeyExA(HKEY hKey,LPCTSTR lpSubKey,DWORD Reserved,LPTSTR lpClass,DWORD dwOptions,REGSAM samDesired,LPSECURITY_ATTRIBUTES lpSecurityAttributes,PHKEY phkResult,DWORD lpdwDisposition);
int __stdcall RegCreateKeyExW(HKEY hKey,LPCTSTR lpSubKey,DWORD Reserved,LPTSTR lpClass,DWORD dwOptions,REGSAM samDesired,LPSECURITY_ATTRIBUTES lpSecurityAttributes,PHKEY phkResult,DWORD lpdwDisposition);
int __stdcall RegCreateKeyTransacted(HKEY hKey,LPCTSTR lpSubKey,DWORD Reserved,LPTSTR lpClass,DWORD dwOptions,REGSAM samDesired,const LPSECURITY_ATTRIBUTES lpSecurityAttributes,PHKEY phkResult,DWORD lpdwDisposition,HANDLE hTransaction,PVOID pExtendedParemeter);
int __stdcall RegCreateKeyW(HKEY hKey,LPCTSTR lpSubKey,PHKEY phkResult);
int __stdcall RegDeleteKey(HKEY hKey,LPCTSTR lpSubKey);
int __stdcall RegDeleteKeyA(HKEY hKey,LPCTSTR lpSubKey);
int __stdcall RegDeleteKeyEx(HKEY hKey,LPCTSTR lpSubKey,REGSAM samDesired,DWORD Reserved);
int __stdcall RegDeleteKeyTransacted(HKEY hKey,LPCTSTR lpSubKey,REGSAM samDesired,DWORD Reserved,HANDLE hTransaction,PVOID pExtendedParameter);
int __stdcall RegDeleteKeyValue(HKEY hKey,LPCTSTR lpSubKey,LPCTSTR lpValueName);
int __stdcall RegDeleteKeyW(HKEY hKey,LPCTSTR lpSubKey);
int __stdcall RegDeleteTree(HKEY hKey,LPCTSTR lpSubKey);
int __stdcall RegDeleteValue(HKEY hKey,LPCTSTR lpValueName);
int __stdcall RegDeleteValueA(HKEY hKey,LPCTSTR lpValueName);
int __stdcall RegDeleteValueW(HKEY hKey,LPCTSTR lpValueName);
int __stdcall RegDisablePredefinedCache();
int __stdcall RegDisablePredefinedCacheEx();
int __stdcall RegDisableReflectionKey(HKEY hBase);
int __stdcall RegEnableReflectionKey(HKEY hBase);
int __stdcall RegEnumKey(HKEY hKey,DWORD dwIndex,LPTSTR lpName,DWORD cchName);
int __stdcall RegEnumKeyA(HKEY hKey,DWORD dwIndex,LPTSTR lpName,DWORD cbName);
int __stdcall RegEnumKeyEx(HKEY hKey,DWORD dwIndex,LPTSTR lpName,LPDWORD lpcName,LPDWORD lpReserved,LPTSTR lpClass,LPDWORD lpcClass,PFILETIME lpftLastWriteTime);
int __stdcall RegEnumKeyExA(HKEY hKey,DWORD dwIndex,LPTSTR lpName,LPDWORD lpcbName,LPDWORD lpReserved,LPTSTR lpClass,LPDWORD lpcbClass,PFILETIME lpftLastWriteTime);
int __stdcall RegEnumKeyExW(HKEY hKey,DWORD dwIndex,LPTSTR lpName,LPDWORD lpcbName,LPDWORD lpReserved,LPTSTR lpClass,LPDWORD lpcbClass,PFILETIME lpftLastWriteTime);
int __stdcall RegEnumKeyW(HKEY hKey,DWORD dwIndex,LPTSTR lpName,DWORD cbName);
int __stdcall RegEnumValue(HKEY hKey,DWORD dwIndex,LPTSTR lpValueName,LPDWORD lpcchValueName,LPDWORD lpReserved,DWORD lpType,LPBYTE lpData,LPDWORD lpcbData);
int __stdcall RegEnumValueA(HKEY hKey,DWORD dwIndex,LPTSTR lpValueName,LPDWORD lpcbValueName,LPDWORD lpReserved,DWORD lpType,LPBYTE lpData,LPDWORD lpcbData);
int __stdcall RegEnumValueW(HKEY hKey,DWORD dwIndex,LPTSTR lpValueName,LPDWORD lpcbValueName,LPDWORD lpReserved,DWORD lpType,LPBYTE lpData,LPDWORD lpcbData);
int __stdcall RegFlushKey(HKEY hKey);
int __stdcall RegGetKeySecurity(HKEY hKey,SECURITY_INFORMATION SecurityInformation,PSECURITY_DESCRIPTOR pSecurityDescriptor,LPDWORD lpcbSecurityDescriptor);
int __stdcall RegGetValue(HKEY hkey,LPCTSTR lpSubKey,LPCTSTR lpValue,DWORD dwFlags,DWORD pdwType,PVOID pvData,LPDWORD pcbData);
int __stdcall RegLoadKey(HKEY hKey,LPCTSTR lpSubKey,LPCTSTR lpFile);
int __stdcall RegLoadKeyA(HKEY hKey,LPCTSTR lpSubKey,LPCTSTR lpFile);
int __stdcall RegLoadKeyW(HKEY hKey,LPCTSTR lpSubKey,LPCTSTR lpFile);
int __stdcall RegLoadMUIString(HKEY hKey,LPCTSTR pszValue,LPTSTR pszOutBuf,DWORD cbOutBuf,LPDWORD pcbData,DWORD Flags,LPCTSTR pszDirectory);
int __stdcall RegNotifyChangeKeyValue(HKEY hKey,BOOL bWatchSubtree,DWORD dwNotifyFilter,HANDLE hEvent,BOOL fAsynchronous);
int __stdcall RegOpenCurrentUser(REGSAM samDesired,PHKEY phkResult);
int __stdcall RegOpenKey(HKEY hKey,LPCTSTR lpSubKey,PHKEY phkResult);
int __stdcall RegOpenKeyA(HKEY hKey,LPCTSTR pSubKey,PHKEY phkResult);
int __stdcall RegOpenKeyEx(HKEY hKey,LPCTSTR lpSubKey,DWORD ulOptions,REGSAM samDesired,PHKEY phkResult);
int __stdcall RegOpenKeyExA(HKEY hKey,LPCTSTR lpSubKey,DWORD ulOptions,REGSAM samDesired,PHKEY phkResult);
int __stdcall RegOpenKeyExW(HKEY hKey,LPCTSTR lpSubKey,DWORD ulOptions,REGSAM samDesired,PHKEY phkResult);
int __stdcall RegOpenKeyTransacted(HKEY hKey,LPCTSTR lpSubKey,DWORD ulOptions,REGSAM samDesired,PHKEY phkResult,HANDLE hTransaction,PVOID pExtendedParameter);
int __stdcall RegOpenKeyW(HKEY hKey,LPCTSTR pSubKey,PHKEY phkResult);
int __stdcall RegOpenUserClassesRoot(HANDLE hToken,DWORD dwOptions,REGSAM samDesired,PHKEY phkResult);
int __stdcall RegOverridePredefKey(HKEY hKey,HKEY hNewHKey);
int __stdcall RegQueryInfoKey(HKEY hKey,LPTSTR lpClass,LPDWORD lpcClass,LPDWORD lpReserved,LPDWORD lpcSubKeys,LPDWORD lpcMaxSubKeyLen,LPDWORD lpcMaxClassLen,LPDWORD lpcValues,LPDWORD lpcMaxValueNameLen,LPDWORD lpcMaxValueLen,LPDWORD lpcbSecurityDescriptor,PFILETIME lpftLastWriteTime);
int __stdcall RegQueryInfoKeyA(HKEY hKey,LPTSTR lpClass,LPDWORD lpcbClass,LPDWORD lpReserved,LPDWORD lpcSubKeys,LPDWORD lpcbMaxSubKeyLen,LPDWORD lpcbMaxClassLen,LPDWORD lpcValues,LPDWORD lpcbMaxValueNameLen,LPDWORD lpcbMaxValueLen,LPDWORD lpcbSecurityDescriptor,PFILETIME lpftLastWriteTime);
int __stdcall RegQueryInfoKeyW(HKEY hKey,LPTSTR lpClass,LPDWORD lpcbClass,LPDWORD lpReserved,LPDWORD lpcSubKeys,LPDWORD lpcbMaxSubKeyLen,LPDWORD lpcbMaxClassLen,LPDWORD lpcValues,LPDWORD lpcbMaxValueNameLen,LPDWORD lpcbMaxValueLen,LPDWORD lpcbSecurityDescriptor,PFILETIME lpftLastWriteTime);
int __stdcall RegQueryMultipleValues(HKEY hKey,PVALENT val_list,DWORD num_vals,LPVOID lpValueBuf,LPDWORD ldwTotsize);
int __stdcall RegQueryReflectionKey(HKEY hBase,BOOL* bIsReflectionDisabled);
int __stdcall RegQueryValue(HKEY hKey,LPCTSTR lpSubKey,LPTSTR lpValue,PLONG lpcbValue);
int __stdcall RegQueryValueA(HKEY hKey,LPCTSTR lpSubKey,LPTSTR lpValue,PLONG lpcbValue);
int __stdcall RegQueryValueEx(HKEY hKey,LPCTSTR lpValueName,LPDWORD lpReserved,DWORD lpType,LPBYTE lpData,LPDWORD lpcbData);
int __stdcall RegQueryValueExA(HKEY hKey,LPCTSTR lpValueName,LPDWORD lpReserved,DWORD lpType,LPBYTE lpRegBuffer,LPDWORD nBuffer);
int __stdcall RegQueryValueExW(HKEY hKey,LPCTSTR lpValueName,LPDWORD lpReserved,DWORD lpType,LPBYTE lpRegBuffer,LPDWORD nBuffer);
int __stdcall RegQueryValueW(HKEY hKey,LPCTSTR lpSubKey,LPTSTR lpValue,PLONG lpcbValue);
int __stdcall RegReplaceKey(HKEY hKey,LPCTSTR lpSubKey,LPCTSTR lpNewFile,LPCTSTR lpOldFile);
int __stdcall RegReplaceKeyA(HKEY hKey,LPCTSTR lpSubKey,LPCTSTR lpNewFile,LPCTSTR lpOldFile);
int __stdcall RegReplaceKeyW(HKEY hKey,LPCTSTR lpSubKey,LPCTSTR lpNewFile,LPCTSTR lpOldFile);
int __stdcall RegRestoreKey(HKEY hKey,LPCTSTR lpFile,DWORD dwFlags);
int __stdcall RegRestoreKeyA(HKEY hKey,LPCTSTR lpFile,DWORD dwFlags);
int __stdcall RegRestoreKeyW(HKEY hKey,LPCTSTR lpFile,DWORD dwFlags);
int __stdcall RegSaveKey(HKEY hKey,LPCTSTR lpFile,LPSECURITY_ATTRIBUTES lpSecurityAttributes);
int __stdcall RegSaveKeyA(HKEY hKey,LPCTSTR lpFile,LPSECURITY_ATTRIBUTES lpSecurityAttributes);
int __stdcall RegSaveKeyEx(HKEY hKey,LPCTSTR lpFile,LPSECURITY_ATTRIBUTES lpSecurityAttributes,DWORD Flags);
int __stdcall RegSaveKeyW(HKEY hKey,LPCTSTR lpFile,LPSECURITY_ATTRIBUTES lpSecurityAttributes);
int __stdcall RegSetKeySecurity(HKEY hKey,SECURITY_INFORMATION SecurityInformation,PSECURITY_DESCRIPTOR pSecurityDescriptor);
int __stdcall RegSetKeyValue(HKEY hKey,LPCTSTR lpSubKey,LPCTSTR lpValueName,DWORD dwType,LPCVOID lpData,DWORD cbData);
int __stdcall RegSetValue(HKEY hKey,LPCTSTR lpSubKey,DWORD dwType,LPCTSTR lpData,DWORD cbData);
int __stdcall RegSetValueA(HKEY hKey,LPCTSTR lpSubKey,DWORD dwType,LPCTSTR lpData,DWORD cbData);
int __stdcall RegSetValueEx(HKEY hKey,LPCTSTR lpValueName,DWORD Reserved,DWORD dwType,const BYTE* lpData,DWORD cbData);
int __stdcall RegSetValueExA(HKEY hKey,LPCTSTR lpValueName,DWORD Reserved,DWORD dwType,const BYTE* lpData,DWORD cbData);
int __stdcall RegSetValueExW(HKEY hKey,LPCTSTR lpValueName,DWORD Reserved,DWORD dwType,const BYTE* lpData,DWORD cbData);
int __stdcall RegSetValueW(HKEY hKey,LPCTSTR lpSubKey,DWORD dwType,LPCTSTR lpData,DWORD cbData);
int __stdcall RegUnLoadKey(HKEY hKey,LPCTSTR lpSubKey);
int __stdcall RegUnLoadKeyA(HKEY hKey,LPCTSTR lpSubKey);
int __stdcall RegUnLoadKeyW(HKEY hKey,LPCTSTR lpSubKey);
int __stdcall RegisterEventSource(LPCTSTR lpUNCServerName,LPCTSTR lpSourceName);
int __stdcall RegisterServiceCtrlHandler(LPCTSTR lpServiceName,LPHANDLER_FUNCTION lpHandlerProc);
int __stdcall RegisterServiceCtrlHandlerEx(LPCTSTR lpServiceName,LPHANDLER_FUNCTION_EX lpHandlerProc,LPVOID lpContext);
int __stdcall RegisterTraceGuids(WMIDPREQUEST RequestAddress,PVOID RequestContext,LPCGUID ControlGuid,ULONG GuidCount,PTRACE_GUID_REGISTRATION TraceGuidReg,LPCTSTR MofImagePath,LPCTSTR MofResourceName,PTRACEHANDLE RegistrationHandle);
int __stdcall RegisterWaitChainCOMCallback(PCOGETCALLSTATE CallStateCallback,PCOGETACTIVATIONSTATE ActivationStateCallback);
int __stdcall RemoveTraceCallback(LPCGUID pGuid);
int __stdcall RemoveUsersFromEncryptedFile(LPCWSTR lpFileName,PENCRYPTION_CERTIFICATE_HASH_LIST pHashes);
int __stdcall ReportEvent(HANDLE hEventLog,DWORD wType,WORD wCategory,DWORD dwEventID,PSID lpUserSid,WORD wNumStrings,DWORD dwDataSize,LPCTSTR* lpStrings,LPVOID lpRawData);
int __stdcall RevertToSelf();
int __stdcall SaferCloseLevel(SAFER_LEVEL_HANDLE hLevelHandle);
int __stdcall SaferComputeTokenFromLevel(SAFER_LEVEL_HANDLE LevelHandle,HANDLE InAccessToken,PHANDLE OutAccessToken,DWORD dwFlags,LPVOID lpReserved);
int __stdcall SaferCreateLevel(DWORD dwScopeId,DWORD dwLevelId,DWORD OpenFlags,SAFER_LEVEL_HANDLE* pLevelHandle,LPVOID lpReserved);
int __stdcall SaferGetLevelInformation(SAFER_LEVEL_HANDLE LevelHandle,SAFER_OBJECT_INFO_CLASS dwInfoType,LPVOID lpQueryBuffer,DWORD dwInBufferSize,LPDWORD lpdwOutBufferSize);
int __stdcall SaferGetPolicyInformation(DWORD dwScopeId,SAFER_POLICY_INFO_CLASS SaferPolicyInfoClass,DWORD InfoBufferSize,PVOID InfoBuffer,PDWORD InfoBufferRetSize,LPVOID lpReserved);
int __stdcall SaferIdentifyLevel(DWORD dwNumProperties,PSAFER_CODE_PROPERTIES pCodeProperties,SAFER_LEVEL_HANDLE* pLevelHandle,LPVOID lpReserved);
int __stdcall SaferRecordEventLogEntry(SAFER_LEVEL_HANDLE hLevel,LPCWSTR szTargetPath,LPVOID lpReserved);
int __stdcall SaferiIsExecutableFileType(LPCWSTR szFullPath,BOOLEAN bFromShellExecute);
int __stdcall SetAclInformation(PACL pAcl,LPVOID pAclInformation,DWORD nAclInformationLength,ACL_INFORMATION_CLASS dwAclInformationClass);
int __stdcall SetEntriesInAcl(ULONG cCountOfExplicitEntries,PEXPLICIT_ACCESS pListOfExplicitEntries,PACL OldAcl,PACL* NewAcl);
int __stdcall SetFileSecurity(LPCTSTR lpFileName,SECURITY_INFORMATION SecurityInformation,PSECURITY_DESCRIPTOR pSecurityDescriptor);
int __stdcall SetKernelObjectSecurity(HANDLE Handle,SECURITY_INFORMATION SecurityInformation,PSECURITY_DESCRIPTOR SecurityDescriptor);
int __stdcall SetNamedSecurityInfo(LPTSTR pObjectName,SE_OBJECT_TYPE ObjectType,SECURITY_INFORMATION SecurityInfo,PSID psidOwner,PSID psidGroup,PACL pDacl,PACL pSacl);
int __stdcall SetPrivateObjectSecurity(SECURITY_INFORMATION SecurityInformation,PSECURITY_DESCRIPTOR ModificationDescriptor,PSECURITY_DESCRIPTOR* ObjectsSecurityDescriptor,PGENERIC_MAPPING GenericMapping,HANDLE Token);
int __stdcall SetPrivateObjectSecurityEx(SECURITY_INFORMATION SecurityInformation,PSECURITY_DESCRIPTOR ModificationDescriptor,PSECURITY_DESCRIPTOR* ObjectsSecurityDescriptor,DWORD AutoInheritFlags,PGENERIC_MAPPING GenericMapping,HANDLE Token);
int __stdcall SetSecurityAccessMask(SECURITY_INFORMATION SecurityInformation,LPDWORD DesiredAccess);
int __stdcall SetSecurityDescriptorControl(PSECURITY_DESCRIPTOR pSecurityDescriptor,SECURITY_DESCRIPTOR_CONTROL ControlBitsOfInterest,SECURITY_DESCRIPTOR_CONTROL ControlBitsToSet);
int __stdcall SetSecurityDescriptorDacl(PSECURITY_DESCRIPTOR pSecurityDescriptor,BOOL bDaclPresent,PACL pDacl,BOOL bDaclDefaulted);
int __stdcall SetSecurityDescriptorGroup(PSECURITY_DESCRIPTOR pSecurityDescriptor,PSID pGroup,BOOL bGroupDefaulted);
int __stdcall SetSecurityDescriptorOwner(PSECURITY_DESCRIPTOR pSecurityDescriptor,PSID pOwner,BOOL bOwnerDefaulted);
int __stdcall SetSecurityDescriptorRMControl(PSECURITY_DESCRIPTOR SecurityDescriptor,PUCHAR RMControl);
int __stdcall SetSecurityDescriptorSacl(PSECURITY_DESCRIPTOR pSecurityDescriptor,BOOL bSaclPresent,PACL pSacl,BOOL bSaclDefaulted);
int __stdcall SetSecurityInfo(HANDLE handle,SE_OBJECT_TYPE ObjectType,SECURITY_INFORMATION SecurityInfo,PSID psidOwner,PSID psidGroup,PACL pDacl,PACL pSacl);
int __stdcall SetServiceBits(SERVICE_STATUS_HANDLE hServiceStatus,DWORD dwServiceBits,BOOL bSetBitsOn,BOOL bUpdateImmediately);
int __stdcall SetServiceObjectSecurity(SC_HANDLE hService,SECURITY_INFORMATION dwSecurityInformation,PSECURITY_DESCRIPTOR lpSecurityDescriptor);
int __stdcall SetServiceStatus(SERVICE_STATUS_HANDLE hServiceStatus,LPSERVICE_STATUS lpServiceStatus);
int __stdcall SetThreadToken(PHANDLE Thread,HANDLE Token);
int __stdcall SetTokenInformation(HANDLE TokenHandle,TOKEN_INFORMATION_CLASS TokenInformationClass,LPVOID TokenInformation,DWORD TokenInformationLength);
int __stdcall SetTraceCallback(LPCGUID pGuid,PEVENT_CALLBACK EventCallback);
int __stdcall SetUserFileEncryptionKey(PENCRYPTION_CERTIFICATE pEncryptionCertificate);
int __stdcall StartService(SC_HANDLE hService,DWORD dwNumServiceArgs,LPCTSTR* lpServiceArgVectors);
int __stdcall StartServiceA(SC_HANDLE hService,DWORD dwNumServiceArgs,LPCTSTR* lpServiceArgVectors);
int __stdcall StartServiceCtrlDispatcher(const SERVICE_TABLE_ENTRY* lpServiceTable);
int __stdcall StartServiceCtrlDispatcherA(const SERVICE_TABLE_ENTRY* lpServiceStartTable);
int __stdcall StartServiceW(SC_HANDLE hService,DWORD dwNumServiceArgs,LPCTSTR* lpServiceArgVectors);
int __stdcall StartTrace(PTRACEHANDLE SessionHandle,LPCTSTR SessionName,PEVENT_TRACE_PROPERTIES Properties);
int __stdcall StopTrace(TRACEHANDLE SessionHandle,LPCTSTR SessionName,PEVENT_TRACE_PROPERTIES Properties);
int __stdcall TraceEvent(TRACEHANDLE SessionHandle,PEVENT_TRACE_HEADER EventTrace);
int __stdcall TraceEventInstance(TRACEHANDLE SessionHandle,PEVENT_INSTANCE_HEADER EventTrace,PEVENT_INSTANCE_INFO pInstInfo,PEVENT_INSTANCE_INFO pParentInstInfo);
int __stdcall TraceMessageVa(TRACEHANDLE SessionHandle,ULONG MessageFlags,LPGUID MessageGuid,USHORT MessageNumber,va_list MessageArgList);
int __stdcall TraceSetInformation(TRACEHANDLE SessionHandle,TRACE_INFO_CLASS InformationClass,PVOID TraceInformation,ULONG InformationLength);
int __stdcall TreeResetNamedSecurityInfo(LPTSTR pObjectName,SE_OBJECT_TYPE ObjectType,SECURITY_INFORMATION SecurityInfo,PSID pOwner,PSID pGroup,PACL pDacl,PACL pSacl,BOOL KeepExplicit,FN_PROGRESS fnProgress,PROG_INVOKE_SETTING ProgressInvokeSetting,PVOID Args);
int __stdcall TreeSetNamedSecurityInfo(LPTSTR pObjectName,SE_OBJECT_TYPE ObjectType,SECURITY_INFORMATION SecurityInfo,PSID pOwner,PSID pGroup,PACL pDacl,PACL pSacl,DWORD dwAction,FN_PROGRESS fnProgress,PROG_INVOKE_SETTING ProgressInvokeSetting,PVOID Args);
int __stdcall UninstallApplication(WCHAR* ProductCode,DWORD dwStatus);
int __stdcall UnlockServiceDatabase(SC_LOCK ScLock);
int __stdcall UnregisterTraceGuids(TRACEHANDLE RegistrationHandle);
int __stdcall UpdateTrace(TRACEHANDLE SessionHandle,LPCTSTR SessionName,PEVENT_TRACE_PROPERTIES Properties);
int __stdcall WriteEncryptedFileRaw(PFE_IMPORT_FUNC pfImportCallback,PVOID pvCallbackContext,PVOID pvContext);